/*
 * Arduino YM2149 MIDI Synth v0.9 (Polyphonic Version)
 * 
 * Based on re-factored Yukimizake code by Dansfing / dansfing.uk
 * Updated PCB design and modifications for 2024 by crunchypotato for HobbyChop.
 * This version has been modified to allow two simultaneous sample playbacks.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License.
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include <math.h>

//----------------- Fixed-Point Definitions -----------------
#define FP_SHIFT 8
#define FP_ONE   (1 << FP_SHIFT)

// For pitch bend: define range in semitones (Â±2 semitones in this example)
#define PITCH_BEND_RANGE 12

//----------------- Prototypes for note functions (assumed to be defined elsewhere) -----------------
void playNote(byte note, byte velocity, byte channel, int detune);
void playNoteB(byte note, byte velocity, byte channel, int detune);
void stopNote(byte note, byte channel);
void stopNoteB(byte note, byte channel);

//----------------- Global Volume Controls -----------------
volatile uint8_t sample1VolumeScale = 1;  // multiplier for channel 1
volatile uint8_t sample1MaxVolume   = 15;   // maximum value for channel 1

//----------------- Helper Function to Scale a Sample -----------------
uint8_t applyVolumeScaling(uint8_t sample, uint8_t volumeOffset, uint8_t maxVolume) {
  uint8_t scaled = sample + volumeOffset;
  if(scaled > maxVolume) {
    scaled = maxVolume;
  }
  return scaled;
}

//----------------- Port Settings -----------------
const int ad0 = 8;
const int ad1 = 9;
const int ad2 = 2;
const int ad3 = 3;
const int ad4 = 4;
const int ad5 = 5;
const int ad6 = 6;
const int ad7 = 7;
const int pinBC1 = 10;   
const int pinBDIR = 11;
const int pinYMReset = 12;
#define buttonPin A1

// Global controls
bool setBankB;
byte defaultVolume = 0x0F;
byte defaultLevel = 10;
int mixerVolumeOffset = 5;
byte velo;
int velocityValue = 127;
int velocityStatus = 0;
// (Other CC controls omitted for brevity)

// NEW: Global low-pass filter coefficient, controlled by the mod wheel (CC1)
// A value from 16 (more filtering) to 255 (almost no filtering).
volatile uint8_t filterAlpha = 150;

// Fast pin switching functions
void setPinHigh(volatile uint8_t &port, uint8_t pin) {
    asm volatile("sbi %[port], %[pin]" 
                 : 
                 : [port] "I" (_SFR_IO_ADDR(port)), [pin] "I" (pin));
}

void setPinLow(volatile uint8_t &port, uint8_t pin) {
    asm volatile("cbi %[port], %[pin]" 
                 : 
                 : [port] "I" (_SFR_IO_ADDR(port)), [pin] "I" (pin));
}

#define __BCPORT__ PORTB
#define __BC1__ 2
#define __BDIR__ 3
#define __LEDPORT__ PORTB
#define __LED__ 5
#define CLEAR(port, pin) (port &= ~(1 << pin))

const int ledPin = 13;
unsigned long ledTurnOffTime = 0;
                
// Sample: DPCMclap2_C4
// Sample Rate: 4000 Hz, Sample Count: 777
PROGMEM const uint8_t DPCMclap2_C4[] = { 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 11, 14, 13, 5, 7, 14, 15, 15, 15, 9, 14, 13, 12, 15, 15, 14, 10, 7, 0, 1, 9, 15, 15, 15, 14, 15, 11, 8, 15, 12, 10, 15, 15, 15, 10, 13, 15, 14, 7, 3, 3, 0, 3, 11, 14, 13, 10, 15, 14, 5, 6, 3, 0, 9, 14, 15, 15, 12, 5, 2, 0, 0, 9, 11, 7, 8, 15, 15, 15, 15, 15, 10, 11, 15, 10, 11, 6, 10, 13, 13, 6, 1, 3, 12, 9, 6, 5, 7, 6, 2, 7, 0, 2, 9, 15, 12, 7, 11, 9, 7, 4, 10, 14, 6, 9, 5, 2, 11, 13, 9, 13, 8, 8, 15, 9, 8, 13, 6, 5, 8, 0, 0, 3, 8, 9, 14, 10, 5, 1, 10, 6, 3, 11, 13, 4, 6, 7, 14, 15, 11, 14, 8, 2, 3, 8, 15, 12, 5, 7, 15, 13, 12, 7, 6, 9, 1, 7, 8, 0, 5, 8, 3, 11, 7, 0, 3, 11, 5, 0, 1, 11, 7, 9, 10, 2, 7, 13, 8, 1, 0, 8, 6, 11, 15, 10, 5, 10, 4, 8, 14, 11, 4, 0, 9, 9, 12, 10, 8, 12, 3, 7, 10, 6, 12, 10, 3, 3, 6, 2, 13, 7, 5, 6, 7, 10, 10, 5, 8, 9, 10, 10, 8, 14, 7, 10, 0, 4, 6, 7, 7, 2, 10, 15, 13, 5, 6, 11, 3, 0, 2, 7, 11, 13, 11, 5, 8, 10, 13, 10, 7, 5, 5, 3, 7, 8, 12, 5, 12, 9, 3, 11, 8, 2, 6, 14, 13, 6, 3, 12, 10, 5, 6, 12, 9, 8, 6, 5, 10, 6, 7, 3, 10, 3, 10, 8, 1, 5, 9, 11, 6, 4, 11, 12, 7, 8, 6, 2, 9, 8, 8, 9, 11, 5, 9, 11, 1, 4, 8, 8, 13, 15, 10, 3, 0, 6, 9, 11, 5, 1, 9, 8, 8, 9, 6, 10, 8, 8, 7, 6, 10, 4, 9, 6, 10, 3, 10, 9, 6, 9, 9, 5, 4, 11, 11, 4, 12, 7, 4, 8, 5, 9, 8, 10, 11, 3, 5, 12, 11, 4, 4, 10, 7, 5, 7, 4, 10, 11, 6, 8, 7, 10, 3, 6, 10, 7, 10, 8, 6, 7, 4, 11, 5, 7, 10, 5, 10, 8, 0, 6, 6, 7, 8, 10, 9, 9, 4, 8, 9, 8, 4, 10, 7, 6, 9, 10, 5, 8, 6, 6, 11, 8, 10, 6, 7, 7, 6, 7, 12, 4, 8, 8, 6, 3, 11, 10, 6, 7, 5, 8, 13, 6, 7, 5, 11, 7, 9, 10, 3, 5, 10, 6, 11, 10, 5, 8, 7, 9, 6, 6, 6, 9, 6, 11, 7, 4, 7, 6, 9, 9, 6, 7, 9, 7, 9, 5, 7, 7, 8, 8, 8, 11, 6, 7, 7, 4, 10, 7, 8, 7, 8, 6, 8, 8, 8, 7, 8, 7, 7, 7, 10, 7, 6, 9, 7, 7, 9, 7, 8, 6, 8, 7, 8, 7, 8, 6, 8, 8, 7, 8, 8, 3, 10, 6, 6, 10, 8, 8, 8, 6, 8, 7, 6, 9, 7, 8, 7, 6, 7, 9, 7, 8, 7, 7, 7, 9, 6, 6, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 6, 9, 8, 7, 7, 8, 7, 8, 7, 9, 8, 5, 8, 7, 7, 8, 7, 8, 7, 8, 9, 7, 8, 7, 6, 7, 8, 8, 8, 9, 7, 7, 8, 6, 7, 8, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 8, 7, 8, 8, 7, 7, 8, 7, 7, 8, 8, 8, 7, 8, 7, 7, 8, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 8, 7, 8, 8, 7, 8, 7, 8, 7, 7, 8, 7, 8, 9, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 8, 7, 8, 7, 7, 8, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int DPCMclap2_C4_len = 777;

// Sample: DPCMclap_C4
// Sample Rate: 4000 Hz, Sample Count: 1011
PROGMEM const uint8_t DPCMclap_C4[] = { 8, 8, 8, 7, 8, 7, 8, 7, 11, 9, 8, 10, 15, 10, 4, 12, 14, 6, 13, 15, 11, 2, 14, 15, 13, 8, 9, 10, 11, 7, 8, 10, 8, 11, 3, 12, 10, 9, 7, 7, 8, 10, 7, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 0, 11, 14, 5, 8, 15, 15, 6, 2, 12, 0, 3, 14, 15, 4, 9, 12, 8, 6, 13, 10, 5, 8, 11, 6, 6, 9, 7, 9, 9, 7, 8, 8, 7, 8, 9, 8, 5, 10, 9, 7, 8, 8, 8, 7, 9, 7, 8, 6, 0, 9, 11, 3, 9, 2, 7, 11, 5, 9, 10, 7, 12, 12, 8, 4, 5, 14, 8, 9, 8, 12, 9, 2, 11, 12, 4, 8, 11, 11, 7, 6, 10, 9, 9, 7, 7, 6, 10, 12, 11, 9, 7, 15, 7, 11, 14, 7, 5, 8, 3, 11, 13, 5, 2, 7, 9, 0, 8, 7, 0, 5, 12, 5, 0, 6, 13, 12, 4, 13, 11, 4, 4, 5, 8, 5, 9, 11, 7, 6, 4, 4, 12, 7, 0, 5, 11, 15, 4, 7, 9, 5, 13, 1, 10, 9, 5, 12, 14, 7, 7, 8, 9, 6, 8, 5, 0, 10, 13, 8, 1, 13, 10, 8, 5, 5, 11, 8, 3, 0, 12, 4, 1, 7, 12, 15, 4, 0, 10, 14, 8, 3, 9, 7, 13, 6, 13, 6, 7, 7, 8, 7, 11, 3, 8, 11, 5, 2, 10, 8, 6, 10, 9, 4, 9, 8, 9, 7, 6, 10, 6, 4, 8, 5, 10, 11, 2, 0, 12, 11, 4, 4, 14, 7, 3, 8, 8, 8, 12, 8, 7, 9, 7, 4, 7, 10, 5, 7, 9, 12, 5, 4, 12, 8, 2, 7, 12, 3, 8, 11, 5, 8, 11, 2, 7, 14, 5, 0, 6, 13, 8, 7, 6, 10, 5, 7, 10, 10, 8, 3, 3, 13, 6, 3, 12, 7, 8, 10, 5, 9, 7, 7, 6, 11, 11, 4, 5, 8, 11, 4, 6, 10, 6, 10, 7, 8, 7, 7, 7, 12, 3, 7, 7, 9, 9, 4, 6, 11, 4, 3, 13, 8, 5, 8, 9, 11, 3, 11, 7, 6, 9, 9, 5, 10, 7, 7, 7, 7, 6, 10, 6, 9, 6, 7, 7, 6, 10, 7, 9, 6, 5, 8, 11, 7, 6, 7, 8, 8, 6, 8, 9, 8, 6, 9, 6, 7, 7, 9, 8, 5, 6, 10, 8, 7, 6, 7, 8, 9, 6, 7, 7, 10, 7, 6, 7, 9, 8, 7, 5, 8, 8, 7, 8, 7, 7, 10, 5, 9, 8, 7, 7, 7, 8, 6, 9, 9, 6, 7, 8, 6, 9, 7, 5, 9, 9, 5, 7, 10, 4, 7, 8, 9, 6, 5, 9, 11, 6, 5, 8, 10, 7, 7, 7, 8, 7, 8, 9, 7, 8, 6, 6, 9, 8, 6, 7, 9, 7, 8, 7, 7, 8, 8, 6, 8, 8, 8, 7, 6, 8, 8, 7, 8, 7, 8, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 9, 8, 6, 8, 8, 7, 8, 8, 5, 7, 11, 9, 3, 7, 9, 9, 6, 8, 7, 9, 7, 6, 7, 7, 7, 7, 8, 9, 6, 7, 7, 9, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 9, 7, 8, 6, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 9, 5, 7, 8, 7, 8, 7, 8, 7, 7, 7, 9, 8, 6, 8, 7, 8, 8, 7, 8, 7, 7, 7, 8, 7, 8, 8, 7, 7, 8, 7, 7, 8, 9, 6, 7, 7, 8, 8, 6, 8, 8, 7, 7, 7, 7, 8, 9, 8, 7, 7, 8, 8, 7, 7, 8, 7, 7, 8, 7, 8, 8, 6, 8, 7, 9, 7, 7, 7, 8, 8, 7, 7, 7, 8, 9, 6, 8, 7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 9, 8, 6, 7, 9, 8, 6, 7, 7, 8, 8, 6, 9, 8, 6, 7, 7, 9, 7, 7, 8, 7, 7, 8, 7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 9, 7, 6, 7, 8, 9, 6, 8, 7, 8, 7, 8, 7, 8, 6, 8, 9, 7, 6, 8, 7, 8, 7, 7, 8, 7, 7, 7, 8, 8, 7, 7, 7, 9, 7, 8, 7, 8, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 6, 7, 9, 6, 7, 8, 8, 6, 8, 7, 8, 7, 8, 7, 6, 8, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 8, 8, 6, 7, 8, 8, 7, 8, 7, 8, 8, 8, 7, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 8, 7, 8, 7, 8, 7 };
const unsigned int DPCMclap_C4_len = 1011;

// Sample: DPCMdog_C4
// Sample Rate: 4000 Hz, Sample Count: 1066
PROGMEM const uint8_t DPCMdog_C4[] = { 8, 8, 9, 9, 8, 8, 8, 9, 8, 8, 8, 9, 9, 8, 8, 9, 9, 8, 8, 12, 13, 12, 10, 9, 12, 13, 10, 8, 9, 12, 13, 10, 9, 10, 13, 12, 9, 8, 12, 15, 14, 10, 9, 12, 15, 12, 8, 10, 13, 14, 11, 9, 12, 14, 14, 9, 8, 14, 15, 15, 11, 8, 13, 15, 15, 8, 9, 15, 15, 14, 11, 15, 15, 11, 9, 14, 15, 14, 9, 10, 15, 15, 13, 8, 12, 15, 15, 13, 7, 12, 15, 15, 15, 10, 15, 15, 15, 12, 12, 15, 15, 15, 12, 15, 15, 15, 12, 11, 15, 15, 15, 12, 12, 15, 15, 15, 9, 11, 15, 15, 15, 11, 15, 15, 15, 12, 14, 15, 15, 15, 15, 15, 15, 12, 12, 15, 15, 15, 13, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 15, 14, 12, 12, 15, 15, 15, 13, 9, 15, 15, 15, 13, 9, 11, 15, 15, 15, 12, 11, 15, 15, 15, 15, 8, 8, 15, 15, 15, 11, 12, 15, 15, 15, 15, 12, 9, 15, 15, 15, 15, 11, 14, 15, 15, 13, 9, 15, 15, 15, 12, 9, 14, 15, 15, 15, 9, 10, 15, 15, 15, 9, 9, 15, 15, 15, 13, 11, 15, 15, 15, 10, 11, 15, 15, 15, 9, 13, 15, 15, 12, 8, 14, 15, 15, 15, 9, 12, 15, 15, 14, 8, 12, 15, 15, 12, 9, 15, 15, 15, 13, 10, 15, 15, 15, 12, 11, 15, 15, 15, 9, 11, 15, 15, 15, 8, 13, 15, 15, 11, 9, 15, 15, 15, 10, 10, 15, 15, 14, 8, 14, 15, 15, 10, 10, 15, 15, 15, 9, 11, 15, 15, 8, 12, 15, 15, 14, 8, 13, 15, 13, 9, 14, 15, 15, 11, 11, 15, 15, 8, 11, 15, 15, 15, 12, 12, 15, 10, 9, 15, 15, 15, 14, 11, 15, 12, 10, 12, 15, 15, 15, 12, 14, 12, 8, 15, 15, 15, 15, 15, 13, 8, 10, 15, 15, 15, 15, 15, 15, 9, 14, 15, 15, 10, 15, 15, 15, 9, 13, 15, 15, 10, 14, 15, 15, 9, 13, 15, 15, 10, 11, 15, 15, 9, 12, 15, 15, 10, 9, 15, 15, 11, 8, 15, 15, 13, 9, 15, 15, 14, 7, 12, 15, 15, 9, 13, 15, 15, 7, 11, 15, 15, 12, 15, 15, 10, 9, 15, 15, 13, 15, 15, 15, 10, 10, 15, 15, 10, 14, 15, 15, 10, 10, 15, 15, 9, 8, 15, 15, 13, 8, 15, 15, 12, 9, 15, 15, 15, 11, 11, 15, 15, 8, 12, 15, 15, 14, 9, 15, 15, 13, 7, 12, 15, 15, 9, 8, 15, 15, 8, 9, 15, 15, 15, 9, 13, 15, 15, 9, 11, 15, 15, 12, 9, 15, 15, 13, 8, 14, 15, 15, 7, 10, 15, 15, 11, 7, 14, 15, 15, 7, 10, 15, 15, 11, 7, 14, 15, 15, 8, 12, 15, 15, 11, 7, 13, 15, 15, 8, 11, 15, 15, 13, 8, 13, 15, 15, 11, 15, 15, 15, 9, 5, 12, 15, 15, 11, 10, 15, 15, 15, 11, 7, 8, 14, 15, 14, 15, 15, 15, 15, 14, 14, 14, 9, 8, 15, 15, 15, 14, 15, 15, 15, 9, 12, 15, 15, 8, 8, 15, 15, 15, 9, 11, 15, 15, 13, 10, 15, 15, 12, 8, 12, 15, 15, 13, 8, 13, 15, 15, 12, 9, 14, 15, 14, 12, 14, 15, 15, 14, 14, 15, 15, 14, 14, 14, 15, 14, 13, 13, 15, 14, 14, 15, 15, 15, 15, 13, 13, 12, 12, 14, 15, 15, 15, 14, 13, 15, 15, 14, 14, 14, 15, 15, 14, 11, 11, 14, 15, 15, 13, 15, 15, 15, 13, 10, 15, 15, 15, 14, 13, 15, 15, 12, 11, 15, 15, 15, 13, 12, 14, 15, 15, 14, 12, 15, 15, 15, 13, 12, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7 };
const unsigned int DPCMdog_C4_len = 1066;

// Sample: DPCMfiltersnap_C4
// Sample Rate: 4000 Hz, Sample Count: 238
PROGMEM const uint8_t DPCMfiltersnap_C4[] = { 8, 8, 8, 8, 8, 8, 9, 8, 8, 10, 12, 10, 9, 8, 9, 8, 9, 9, 10, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 12, 7, 14, 6, 10, 11, 5, 12, 10, 4, 11, 12, 4, 7, 14, 12, 4, 7, 14, 14, 6, 3, 9, 15, 15, 8, 2, 7, 13, 15, 14, 7, 1, 5, 12, 15, 15, 15, 9, 2, 0, 8, 13, 15, 15, 15, 12, 7, 0, 0, 3, 8, 14, 15, 15, 15, 14, 11, 6, 1, 0, 0, 3, 6, 9, 14, 15, 15, 15, 15, 13, 11, 9, 5, 2, 0, 0, 1, 4, 6, 8, 11, 14, 15, 15, 15, 15, 14, 12, 11, 9, 8, 6, 4, 2, 1, 1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 14, 14, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11, 12, 12, 12, 12, 12, 12, 11, 11, 10, 9, 9, 8, 7, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7 };
const unsigned int DPCMfiltersnap_C4_len = 238;

// Sample: DPCMkick1_C4
// Sample Rate: 4000 Hz, Sample Count: 406
PROGMEM const uint8_t DPCMkick1_C4[] = { 7, 8, 7, 8, 7, 9, 11, 11, 8, 10, 10, 9, 14, 15, 15, 15, 15, 15, 15, 15, 15, 14, 11, 9, 6, 1, 3, 1, 3, 2, 3, 6, 4, 5, 8, 10, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 10, 8, 6, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 6, 9, 12, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 10, 9, 9, 8, 7, 6, 5, 4, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 13, 13, 13, 12, 12, 11, 11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int DPCMkick1_C4_len = 406;

// Sample: DPCMkick2_C4
// Sample Rate: 4000 Hz, Sample Count: 406
PROGMEM const uint8_t DPCMkick2_C4[] = { 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 9, 9, 9, 8, 11, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 9, 5, 2, 0, 0, 0, 1, 1, 3, 3, 5, 7, 9, 10, 11, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 12, 9, 6, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 6, 8, 10, 11, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 13, 13, 12, 11, 10, 9, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 7, 6, 7, 8, 8, 9, 9, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 11, 11, 10, 10, 10, 10, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int DPCMkick2_C4_len = 406;

// Sample: DPCMkickhard_C4
// Sample Rate: 4000 Hz, Sample Count: 1055
PROGMEM const uint8_t DPCMkickhard_C4[] = { 8, 7, 8, 7, 8, 8, 10, 11, 14, 13, 12, 9, 10, 7, 9, 8, 6, 13, 15, 15, 15, 14, 10, 6, 5, 5, 5, 7, 6, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 11, 6, 4, 2, 1, 0, 0, 1, 1, 3, 3, 4, 6, 8, 11, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 11, 8, 6, 2, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 12, 11, 8, 7, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 5, 7, 9, 11, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 12, 11, 10, 8, 7, 6, 5, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 5, 6, 8, 10, 11, 12, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 14, 13, 12, 12, 10, 10, 9, 7, 7, 6, 5, 4, 3, 2, 1, 1, 0, 1, 1, 0, 2, 1, 1, 3, 3, 4, 6, 7, 7, 9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 14, 14, 14, 13, 13, 12, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 10, 10, 9, 8, 8, 7, 6, 6, 5, 5, 5, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 5, 6, 6, 8, 8, 9, 9, 10, 10, 11, 10, 11, 11, 11, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 10, 10, 9, 9, 9, 8, 8, 8, 7, 7, 6, 6, 6, 6, 5, 5, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 7, 9, 9, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 10, 10, 9, 9, 9, 8, 8, 7, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int DPCMkickhard_C4_len = 1055;

// Sample: DPCMlaser_C4
// Sample Rate: 4000 Hz, Sample Count: 1132
PROGMEM const uint8_t DPCMlaser_C4[] = { 8, 8, 8, 8, 8, 8, 8, 10, 8, 7, 8, 11, 14, 15, 15, 15, 15, 15, 11, 8, 5, 3, 4, 4, 5, 8, 12, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 10, 6, 4, 6, 7, 3, 1, 0, 0, 8, 15, 14, 9, 6, 7, 10, 13, 14, 10, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 8, 7, 8, 10, 15, 11, 8, 13, 15, 15, 15, 9, 3, 3, 0, 5, 9, 0, 0, 0, 3, 6, 8, 5, 2, 2, 10, 10, 13, 12, 5, 12, 12, 13, 13, 13, 12, 12, 11, 14, 15, 13, 14, 12, 15, 15, 15, 10, 11, 13, 12, 6, 7, 8, 10, 5, 3, 7, 8, 3, 2, 5, 10, 6, 0, 3, 11, 3, 5, 11, 9, 2, 4, 12, 11, 7, 5, 8, 10, 4, 3, 9, 8, 13, 10, 4, 6, 11, 11, 3, 5, 13, 13, 5, 1, 9, 13, 8, 6, 12, 14, 6, 0, 6, 14, 13, 9, 10, 12, 10, 4, 4, 8, 9, 11, 12, 9, 5, 2, 3, 8, 14, 14, 7, 7, 11, 8, 1, 1, 5, 9, 5, 7, 8, 6, 0, 0, 7, 13, 12, 12, 9, 6, 5, 5, 8, 11, 11, 11, 10, 8, 2, 0, 2, 9, 11, 13, 12, 11, 8, 6, 4, 7, 11, 13, 14, 12, 8, 2, 1, 0, 2, 8, 9, 9, 8, 9, 10, 11, 6, 3, 4, 10, 15, 15, 13, 6, 0, 0, 9, 12, 10, 7, 3, 4, 7, 11, 10, 5, 1, 4, 12, 14, 14, 7, 1, 0, 4, 9, 11, 9, 3, 0, 4, 8, 11, 13, 13, 9, 3, 7, 7, 11, 11, 13, 11, 9, 4, 1, 0, 4, 10, 11, 12, 9, 1, 0, 0, 7, 9, 10, 11, 10, 8, 4, 4, 3, 6, 9, 13, 11, 9, 7, 5, 7, 8, 13, 11, 9, 8, 5, 7, 4, 8, 11, 9, 12, 5, 7, 5, 6, 7, 11, 7, 12, 8, 8, 7, 5, 3, 6, 4, 5, 8, 5, 5, 8, 2, 9, 6, 14, 7, 12, 6, 9, 8, 9, 13, 11, 10, 9, 8, 9, 2, 8, 0, 5, 7, 9, 9, 5, 11, 9, 7, 8, 9, 4, 8, 9, 6, 6, 5, 9, 7, 4, 9, 4, 3, 8, 6, 6, 8, 3, 12, 9, 9, 14, 10, 10, 8, 7, 7, 8, 3, 4, 7, 7, 12, 8, 15, 12, 10, 12, 5, 5, 9, 0, 3, 7, 3, 8, 10, 10, 12, 11, 6, 2, 8, 6, 0, 4, 5, 3, 13, 11, 8, 12, 11, 12, 6, 0, 5, 4, 4, 6, 5, 8, 12, 12, 15, 9, 11, 12, 8, 1, 5, 0, 0, 4, 6, 9, 12, 14, 12, 13, 8, 5, 7, 3, 0, 0, 0, 1, 10, 8, 13, 15, 13, 12, 12, 15, 9, 3, 1, 4, 7, 8, 5, 11, 8, 4, 13, 12, 10, 5, 3, 4, 3, 8, 8, 6, 12, 10, 9, 15, 10, 12, 13, 4, 1, 2, 3, 0, 0, 6, 10, 5, 4, 11, 13, 14, 15, 12, 12, 10, 4, 5, 2, 7, 11, 6, 0, 3, 10, 7, 13, 11, 11, 13, 10, 11, 10, 7, 7, 7, 3, 0, 2, 6, 0, 5, 9, 4, 8, 12, 10, 6, 4, 5, 8, 6, 9, 10, 5, 7, 11, 10, 9, 8, 10, 12, 9, 3, 1, 5, 7, 7, 5, 6, 9, 10, 10, 13, 11, 10, 11, 11, 8, 5, 5, 3, 2, 6, 5, 0, 4, 10, 7, 7, 6, 10, 10, 7, 7, 12, 11, 6, 7, 12, 8, 6, 4, 3, 7, 9, 7, 3, 8, 9, 6, 6, 11, 10, 9, 9, 10, 10, 12, 10, 4, 6, 8, 7, 4, 7, 5, 5, 5, 7, 7, 7, 11, 7, 3, 8, 12, 7, 6, 9, 6, 6, 9, 10, 5, 6, 9, 8, 8, 9, 9, 5, 7, 9, 6, 6, 8, 11, 8, 4, 6, 9, 10, 9, 8, 7, 6, 9, 13, 10, 7, 6, 7, 6, 3, 5, 6, 3, 5, 6, 5, 4, 7, 11, 15, 8, 7, 6, 8, 9, 12, 10, 9, 4, 6, 8, 7, 5, 4, 8, 7, 9, 7, 9, 4, 9, 9, 14, 10, 8, 6, 8, 8, 8, 9, 7, 8, 3, 6, 4, 5, 0, 3, 5, 9, 11, 8, 9, 7, 9, 9, 13, 9, 8, 4, 5, 8, 9, 7, 5, 9, 7, 10, 12, 9, 5, 4, 6, 6, 9, 10, 7, 7, 7, 8, 8, 10, 7, 4, 6, 5, 6, 8, 7, 6, 4, 7, 8, 10, 12, 8, 8, 7, 8, 9, 7, 9, 7, 7, 7, 8, 9, 7, 8, 6, 7, 8, 7, 9, 7, 7, 9, 7, 8, 6, 8, 9, 6, 7, 5, 6, 5, 4, 7, 5, 5, 6, 8, 9, 7, 7, 9, 8, 8, 8, 10, 11, 10, 10, 9, 7, 6, 6, 7, 8, 8, 8, 9, 7, 7, 6, 5, 6, 7, 6, 7, 6, 7, 9, 8, 8, 9, 6, 5, 4, 4, 7, 6, 7, 11, 9, 7, 8, 6, 6, 7, 6, 9, 10, 8, 10, 10, 9, 10, 7, 7, 8, 6, 6, 7, 6, 7, 8, 8, 8, 8, 6, 6, 6, 5, 6, 7, 8, 8, 7, 7, 8, 8, 7, 6, 6, 6, 6, 6, 5, 7, 8, 8, 9, 9, 9, 9, 8, 7, 8, 7, 8, 9, 9, 8, 7, 9, 9, 9, 8, 7, 7, 7, 7, 5, 4, 5, 6, 7, 8, 7, 7, 8, 7, 6, 6, 5, 5, 8, 8, 8, 8, 8, 9, 9, 9, 8, 7, 8, 9, 8, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 8, 8, 8, 7, 8, 8, 6, 5, 7, 7, 8, 8, 8, 8, 9, 9, 9, 7, 8, 7, 8, 8, 8, 7, 8, 7, 8, 7, 7, 8, 7, 7, 7, 6, 7, 8, 7, 6, 6, 7, 8, 8, 8, 7, 7, 8, 8, 7, 7, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int DPCMlaser_C4_len = 1132;

// Sample: DPCMscream_C4
// Sample Rate: 4000 Hz, Sample Count: 2048
PROGMEM const uint8_t DPCMscream_C4[] = { 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 9, 8, 9, 9, 8, 9, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 9, 6, 9, 8, 6, 10, 7, 7, 9, 6, 8, 8, 6, 8, 7, 7, 8, 7, 8, 7, 7, 7, 8, 7, 8, 8, 7, 9, 7, 8, 9, 5, 9, 8, 8, 10, 8, 9, 8, 8, 9, 8, 8, 8, 8, 8, 8, 7, 8, 8, 7, 9, 7, 9, 7, 9, 8, 7, 9, 5, 10, 8, 8, 12, 6, 10, 9, 9, 8, 10, 7, 9, 9, 7, 10, 7, 10, 7, 9, 7, 8, 11, 4, 12, 7, 7, 10, 6, 9, 8, 8, 7, 10, 5, 10, 8, 6, 12, 4, 10, 7, 7, 9, 6, 10, 5, 12, 5, 10, 9, 6, 12, 6, 12, 8, 8, 10, 8, 8, 9, 9, 7, 9, 8, 7, 10, 7, 8, 9, 7, 9, 8, 7, 10, 7, 9, 7, 8, 8, 9, 7, 8, 8, 7, 9, 7, 8, 8, 7, 9, 7, 9, 6, 9, 7, 9, 7, 8, 8, 7, 10, 6, 11, 7, 10, 5, 11, 5, 8, 9, 5, 12, 4, 10, 8, 5, 10, 4, 11, 5, 10, 9, 6, 11, 3, 12, 3, 9, 6, 7, 9, 5, 9, 5, 9, 7, 7, 10, 5, 9, 6, 9, 7, 8, 7, 8, 7, 7, 7, 8, 6, 8, 7, 7, 8, 6, 9, 7, 7, 9, 6, 8, 7, 8, 7, 8, 8, 7, 8, 6, 8, 6, 9, 7, 7, 8, 7, 8, 7, 7, 8, 8, 7, 9, 5, 11, 5, 11, 4, 11, 3, 10, 6, 8, 7, 8, 7, 8, 5, 9, 6, 9, 5, 8, 6, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 8, 7, 9, 6, 8, 6, 8, 7, 7, 8, 7, 8, 7, 8, 8, 5, 11, 2, 12, 3, 10, 5, 6, 10, 7, 10, 4, 10, 5, 10, 6, 8, 7, 8, 8, 7, 8, 7, 7, 7, 6, 8, 6, 9, 5, 10, 6, 9, 6, 9, 6, 9, 6, 7, 9, 4, 11, 4, 10, 5, 7, 11, 6, 13, 5, 12, 4, 12, 8, 7, 9, 5, 9, 7, 9, 8, 7, 10, 5, 9, 7, 8, 8, 7, 10, 4, 12, 4, 10, 5, 10, 6, 9, 7, 8, 8, 9, 7, 9, 7, 7, 10, 5, 11, 4, 10, 6, 9, 9, 5, 10, 8, 8, 11, 5, 13, 2, 11, 1, 10, 4, 10, 7, 10, 7, 9, 6, 9, 3, 11, 3, 12, 2, 9, 5, 6, 8, 3, 12, 3, 12, 3, 9, 8, 3, 13, 1, 12, 5, 7, 10, 5, 11, 6, 11, 4, 12, 4, 8, 9, 5, 13, 5, 11, 5, 10, 4, 10, 5, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 9, 2, 11, 3, 11, 5, 9, 8, 3, 12, 3, 13, 3, 12, 4, 8, 9, 5, 11, 2, 11, 4, 11, 6, 11, 5, 8, 8, 6, 10, 5, 7, 9, 1, 14, 4, 12, 3, 11, 5, 9, 8, 9, 10, 6, 10, 6, 8, 7, 5, 11, 4, 10, 8, 7, 11, 4, 13, 0, 11, 1, 10, 4, 10, 6, 7, 6, 8, 8, 7, 8, 5, 13, 1, 13, 2, 12, 3, 10, 5, 5, 10, 4, 9, 6, 8, 8, 6, 11, 5, 13, 4, 10, 6, 10, 8, 5, 10, 4, 11, 3, 10, 6, 7, 9, 5, 11, 6, 7, 12, 2, 12, 2, 13, 2, 9, 4, 7, 7, 7, 9, 7, 11, 5, 10, 5, 10, 4, 11, 5, 11, 5, 11, 4, 11, 4, 10, 4, 11, 4, 9, 5, 9, 6, 7, 7, 8, 8, 7, 8, 5, 11, 4, 11, 4, 9, 7, 7, 10, 4, 11, 3, 10, 4, 9, 6, 7, 10, 4, 11, 2, 13, 4, 11, 6, 9, 7, 7, 7, 8, 7, 8, 8, 7, 7, 7, 9, 4, 13, 4, 14, 3, 13, 4, 11, 3, 7, 5, 5, 8, 5, 10, 4, 10, 5, 10, 6, 9, 6, 9, 6, 9, 6, 9, 5, 8, 5, 6, 9, 4, 11, 2, 12, 2, 12, 3, 11, 5, 8, 8, 6, 9, 7, 9, 4, 11, 5, 13, 3, 13, 3, 12, 2, 11, 4, 11, 6, 9, 8, 8, 10, 6, 11, 5, 11, 3, 11, 4, 10, 6, 8, 6, 8, 6, 8, 5, 9, 4, 10, 6, 8, 8, 6, 10, 4, 11, 3, 12, 3, 11, 5, 9, 6, 7, 8, 5, 9, 5, 9, 5, 10, 4, 10, 4, 11, 3, 10, 5, 5, 8, 5, 10, 3, 12, 3, 11, 1, 10, 3, 10, 3, 11, 2, 11, 2, 10, 4, 11, 6, 8, 8, 6, 10, 4, 11, 5, 13, 4, 12, 3, 12, 4, 10, 6, 8, 8, 6, 10, 4, 10, 5, 10, 6, 8, 7, 7, 8, 7, 7, 7, 7, 8, 6, 9, 5, 9, 7, 8, 9, 4, 11, 3, 12, 4, 11, 4, 11, 3, 11, 4, 9, 6, 7, 8, 7, 10, 5, 10, 3, 11, 2, 11, 3, 9, 6, 8, 7, 8, 7, 9, 5, 10, 4, 12, 4, 11, 5, 9, 7, 7, 9, 4, 11, 2, 12, 2, 12, 3, 10, 5, 8, 8, 6, 9, 4, 11, 3, 10, 5, 10, 5, 9, 5, 10, 5, 10, 5, 10, 5, 10, 6, 8, 7, 6, 8, 6, 9, 5, 11, 3, 12, 3, 12, 4, 13, 5, 10, 5, 9, 7, 6, 8, 5, 10, 4, 10, 4, 10, 5, 9, 6, 8, 7, 6, 9, 5, 10, 5, 11, 5, 11, 6, 8, 7, 8, 7, 7, 8, 8, 7, 8, 6, 8, 6, 8, 6, 8, 6, 7, 8, 7, 8, 6, 8, 6, 9, 4, 10, 3, 10, 5, 9, 6, 8, 8, 7, 9, 5, 10, 6, 9, 6, 9, 7, 7, 8, 6, 10, 5, 11, 4, 11, 5, 10, 5, 9, 6, 8, 6, 9, 5, 10, 5, 10, 4, 10, 5, 8, 7, 6, 10, 4, 11, 3, 10, 4, 10, 3, 10, 4, 10, 4, 12, 4, 14, 3, 13, 4, 11, 4, 10, 6, 7, 8, 8, 10, 7, 9, 6, 11, 5, 11, 4, 12, 4, 13, 4, 11, 4, 11, 4, 11, 6, 9, 6, 10, 7, 7, 10, 5, 12, 1, 10, 0, 11, 0, 10, 3, 11, 4, 8, 7, 6, 9, 6, 11, 5, 12, 4, 11, 2, 10, 3, 12, 3, 10, 2, 9, 2, 10, 2, 9, 5, 10, 6, 7, 6, 5, 6, 6, 9, 6, 11, 4, 12, 3, 11, 2, 14, 1, 14, 2, 12, 1, 11, 3, 12, 4, 9, 4, 7, 7, 8, 8, 6, 8, 6, 8, 7, 10, 5, 9, 5, 9, 6, 11, 4, 12, 3, 13, 3, 11, 4, 11, 5, 10, 7, 8, 10, 6, 12, 5, 11, 3, 12, 4, 12, 2, 12, 3, 10, 3, 11, 5, 11, 3, 10, 5, 10, 4, 9, 7, 9, 6, 8, 8, 8, 7, 6, 10, 4, 9, 4, 11, 2, 13, 2, 11, 1, 11, 2, 13, 3, 11, 5, 9, 5, 7, 7, 5, 9, 5, 9, 3, 11, 3, 13, 3, 12, 1, 12, 3, 13, 3, 11, 6, 11, 7, 10, 7, 10, 8, 8, 8, 8, 10, 6, 11, 5, 10, 5, 10, 4, 9, 4, 11, 3, 10, 3, 11, 5, 11, 4, 13, 4, 11, 4, 13, 4, 11, 4, 10, 5, 9, 6, 8, 7, 8, 8, 7, 7, 6, 8, 6, 9, 6, 9, 5, 11, 3, 11, 4, 13, 4, 11, 6, 9, 8, 7, 8, 5, 8, 5, 10, 3, 11, 4, 11, 3, 12, 4, 12, 3, 12, 4, 12, 4, 13, 4, 11, 3, 10, 3, 12, 3, 9, 4, 10, 5, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 6, 8, 6, 9, 5, 9, 5, 9, 6, 9, 5, 9, 6, 8, 6, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 6, 8, 7, 8, 7, 8, 6, 9, 6, 9, 6, 9, 6, 10, 5, 9, 5, 10, 5, 9, 6, 9, 6, 8, 6, 8, 6, 8, 6, 9, 5, 10, 4, 10, 4, 11, 4, 11, 4, 11, 4, 9, 7, 8, 6, 7, 9, 5, 9, 6, 9, 7, 8, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 6, 8, 6, 9, 5, 9, 6, 9, 6, 7, 7, 7, 8, 5, 9, 6, 9, 4, 10, 5, 9, 4, 10, 5, 11, 4, 10, 5, 10, 6, 9, 6, 8, 8, 6, 10, 4, 11, 3, 11, 4, 11, 5, 11, 4, 10, 4, 10, 5, 11, 6, 9, 6, 7, 8, 5, 7, 6, 9, 5, 8, 5, 8, 3, 7, 4, 9, 5, 9, 3, 10, 4, 10, 3, 9, 3, 10, 5, 10, 5, 11, 6, 11, 4, 10, 5, 10, 5, 11, 5, 10, 5, 10, 6, 10, 6, 10, 6, 9, 6, 9, 7, 7, 8, 6, 9, 6, 9, 6, 9, 6, 9, 6, 9, 6, 9, 4, 10, 4, 12, 3, 10, 2, 9, 2, 10, 3, 8, 3, 10, 5, 10, 7, 10, 6, 8, 6, 9, 8, 9, 7, 7, 7, 8, 6, 9, 8, 9, 7, 7, 6, 8, 8, 8, 7, 7, 7, 7, 7, 8, 9, 8, 8, 8, 7, 7, 9, 7, 9, 5, 10, 4, 11, 3, 13, 2, 14, 2, 15, 2, 13, 2, 15, 2, 13, 1, 12, 3, 12, 3, 10, 5, 11, 4, 9, 4, 7, 6, 8, 6, 6, 5, 6, 7, 7, 6, 8, 8, 8, 8, 9, 7, 7, 7, 7, 6, 8, 8, 8, 8, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 6, 9, 7, 7, 7, 7, 8, 8, 8, 7, 9, 7, 8, 6, 9, 6, 10, 5, 10, 5, 11, 3, 12, 3, 12, 3, 11, 4, 11, 3, 10, 4, 10, 4, 11, 5, 9, 4, 10, 6, 8, 6, 8, 8, 8, 8, 9, 7, 9, 6, 7, 8, 8, 8, 6, 7, 6, 9, 6, 9, 6, 10, 5, 10, 5, 10, 4, 10, 5, 10, 4, 10, 4, 11, 5, 9, 6, 7, 6, 8, 7, 6, 7, 7, 8, 8, 8, 6, 7, 7, 9, 6, 7, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 7, 7, 8, 7, 8, 6, 8, 7, 8, 7, 7, 7, 7, 7, 8, 7, 8, 7, 9, 7, 8, 7, 9, 6, 8, 6, 9, 7, 9, 6, 8, 7, 8, 8, 7, 7, 7, 7, 8, 7, 8, 6, 8, 6, 8, 6, 8, 7, 9, 7, 8, 6, 8, 6, 8, 6, 9, 6, 8, 7, 8, 7, 8, 8, 7, 7, 7, 9, 6, 7, 7, 9, 7, 8, 6, 7, 7, 8, 7, 8, 7, 7, 7, 9, 7, 8, 7, 7, 6, 9, 7, 8, 7, 7, 7, 8, 7, 9, 6, 8, 6, 9, 4, 9, 4, 10, 3, 10, 3, 12, 2, 11, 3, 12, 2, 11, 2, 12, 3, 13, 1, 13, 2, 11, 2, 13, 3, 11, 5 };
const unsigned int DPCMscream_C4_len = 2048;

// Sample: DPCMsnare9092_C4
// Sample Rate: 4000 Hz, Sample Count: 468
PROGMEM const uint8_t DPCMsnare9092_C4[] = { 6, 4, 4, 4, 4, 4, 4, 3, 4, 8, 15, 8, 0, 0, 3, 15, 15, 15, 15, 11, 7, 4, 1, 0, 7, 11, 15, 15, 15, 15, 15, 13, 3, 0, 0, 0, 2, 11, 15, 15, 15, 14, 10, 3, 0, 0, 0, 0, 3, 12, 15, 15, 15, 15, 15, 9, 2, 0, 0, 0, 0, 0, 2, 6, 11, 13, 15, 15, 15, 15, 15, 10, 6, 5, 0, 0, 0, 0, 1, 7, 15, 15, 15, 15, 15, 12, 9, 2, 4, 2, 1, 5, 8, 9, 9, 12, 13, 14, 12, 9, 7, 6, 6, 4, 3, 2, 1, 2, 3, 4, 7, 11, 14, 15, 15, 15, 11, 7, 2, 1, 0, 0, 0, 2, 7, 11, 14, 15, 12, 12, 8, 4, 3, 1, 4, 4, 4, 8, 9, 12, 14, 15, 15, 11, 9, 11, 10, 7, 6, 7, 6, 5, 5, 5, 7, 8, 9, 6, 8, 9, 7, 6, 7, 4, 5, 3, 6, 6, 6, 9, 9, 10, 10, 10, 11, 9, 9, 7, 7, 6, 9, 5, 6, 7, 7, 9, 7, 8, 8, 8, 8, 9, 9, 5, 5, 4, 5, 2, 5, 8, 7, 9, 10, 11, 12, 10, 10, 8, 7, 6, 7, 6, 9, 8, 7, 9, 9, 9, 7, 7, 8, 8, 8, 8, 6, 4, 6, 7, 6, 6, 8, 7, 8, 8, 10, 8, 7, 7, 8, 7, 8, 7, 7, 7, 6, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 8, 6, 8, 7, 8, 7, 7, 9, 8, 8, 8, 8, 5, 7, 8, 8, 8, 8, 7, 7, 7, 8, 7, 8, 7, 8, 9, 7, 8, 8, 6, 8, 6, 7, 7, 8, 7, 9, 8, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 7, 7, 8, 7, 9, 8, 7, 7, 8, 8, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 8, 8, 6, 6, 8, 7, 7, 8, 6, 6, 8, 8, 8, 9, 8, 8, 8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 7, 8, 8, 8, 7, 7, 8, 8, 8, 7, 7, 8, 7, 8, 8, 7, 8, 7, 7, 8, 8, 7, 8, 7, 7, 8, 8, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 8, 8, 7, 7, 8, 7, 8, 8, 8, 7, 8, 7, 8, 7, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 8, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8 };
const unsigned int DPCMsnare9092_C4_len = 468;

// Sample: DPCMsnare909_C4
// Sample Rate: 4000 Hz, Sample Count: 453
PROGMEM const uint8_t DPCMsnare909_C4[] = { 6, 4, 4, 4, 4, 3, 4, 8, 15, 15, 15, 15, 7, 0, 0, 0, 5, 12, 15, 15, 15, 15, 15, 14, 6, 0, 0, 0, 0, 0, 5, 12, 15, 15, 15, 15, 15, 15, 10, 3, 0, 0, 0, 0, 4, 9, 11, 13, 15, 13, 12, 10, 13, 13, 11, 7, 4, 0, 0, 0, 0, 0, 0, 1, 9, 15, 15, 15, 15, 15, 15, 13, 11, 6, 1, 1, 0, 1, 1, 4, 8, 9, 11, 14, 14, 13, 11, 12, 11, 11, 12, 9, 9, 6, 5, 2, 0, 0, 0, 0, 3, 7, 10, 13, 14, 14, 14, 13, 13, 10, 9, 6, 3, 4, 2, 1, 1, 3, 6, 8, 8, 11, 11, 11, 11, 11, 10, 10, 10, 9, 9, 8, 6, 5, 4, 2, 0, 1, 2, 6, 8, 10, 11, 11, 13, 13, 11, 11, 9, 9, 7, 5, 4, 5, 3, 4, 7, 6, 7, 8, 9, 9, 10, 10, 8, 8, 10, 9, 8, 9, 7, 6, 6, 6, 5, 4, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 9, 9, 8, 7, 6, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 8, 8, 8, 9, 9, 7, 8, 7, 7, 6, 6, 6, 5, 6, 6, 7, 7, 9, 9, 9, 9, 10, 8, 9, 8, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 7, 6, 6, 6, 6, 7, 6, 7, 8, 8, 8, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8 };
const unsigned int DPCMsnare909_C4_len = 453;

// Sample: DPCMsnarecontra_C4
// Sample Rate: 4000 Hz, Sample Count: 666
PROGMEM const uint8_t DPCMsnarecontra_C4[] = { 11, 15, 15, 15, 15, 15, 15, 15, 15, 13, 12, 10, 6, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 8, 10, 12, 14, 15, 15, 15, 15, 14, 13, 11, 9, 8, 5, 1, 0, 0, 0, 0, 0, 0, 2, 5, 8, 11, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 12, 10, 8, 8, 7, 4, 2, 1, 1, 0, 1, 2, 3, 3, 3, 4, 3, 5, 7, 7, 8, 9, 10, 11, 11, 12, 13, 13, 13, 11, 10, 9, 7, 5, 3, 0, 0, 0, 0, 0, 0, 1, 3, 7, 9, 12, 14, 15, 15, 15, 15, 15, 15, 15, 13, 11, 9, 8, 7, 5, 3, 1, 0, 0, 0, 0, 0, 1, 3, 5, 8, 9, 9, 10, 12, 14, 13, 14, 13, 13, 13, 11, 11, 9, 8, 7, 5, 3, 2, 2, 1, 0, 0, 0, 1, 5, 6, 7, 8, 9, 12, 13, 13, 13, 14, 13, 13, 12, 12, 10, 9, 8, 7, 6, 6, 5, 4, 3, 3, 3, 2, 3, 3, 4, 5, 6, 8, 8, 9, 10, 10, 12, 12, 11, 11, 12, 12, 11, 10, 9, 9, 9, 7, 6, 6, 5, 3, 3, 3, 2, 3, 2, 4, 4, 5, 8, 9, 9, 10, 11, 13, 13, 12, 13, 13, 12, 11, 9, 8, 8, 10, 7, 4, 5, 4, 3, 4, 4, 3, 4, 4, 4, 5, 6, 7, 8, 8, 10, 11, 12, 11, 12, 12, 12, 11, 11, 12, 10, 8, 8, 8, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 6, 5, 6, 7, 9, 10, 10, 11, 12, 12, 11, 11, 10, 10, 10, 9, 8, 8, 8, 8, 6, 4, 4, 5, 4, 4, 4, 5, 5, 6, 6, 7, 8, 9, 8, 9, 10, 10, 11, 11, 10, 10, 9, 10, 10, 7, 7, 7, 8, 7, 6, 4, 5, 4, 5, 5, 5, 4, 5, 6, 6, 6, 8, 8, 9, 9, 10, 11, 11, 11, 10, 10, 10, 9, 8, 9, 9, 8, 8, 8, 7, 6, 5, 4, 5, 5, 5, 6, 6, 6, 7, 8, 7, 8, 8, 8, 8, 8, 9, 10, 10, 9, 9, 9, 9, 8, 8, 7, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 7, 7, 8, 9, 9, 10, 10, 10, 10, 10, 9, 10, 8, 9, 8, 8, 7, 8, 7, 7, 6, 5, 6, 6, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 8, 7, 7, 7, 7, 6, 6, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 7, 7, 7, 6, 7, 6, 6, 7, 7, 7, 6, 6, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 7, 7, 7, 7, 6, 7, 6, 5, 6, 7, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 8, 9, 9, 8, 9, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 7, 7, 7, 8, 8, 8, 7, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6 };
const unsigned int DPCMsnarecontra_C4_len = 666;

// Sample: DPCMsnarehigh_C4
// Sample Rate: 4000 Hz, Sample Count: 875
PROGMEM const uint8_t DPCMsnarehigh_C4[] = { 7, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 4, 5, 11, 14, 8, 2, 4, 10, 12, 8, 9, 14, 15, 13, 13, 15, 13, 14, 12, 8, 2, 0, 1, 3, 8, 10, 10, 8, 12, 9, 9, 13, 15, 12, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 13, 15, 15, 15, 15, 15, 15, 15, 12, 10, 9, 12, 11, 7, 2, 0, 0, 1, 3, 5, 10, 14, 15, 11, 14, 15, 13, 9, 6, 5, 2, 0, 0, 0, 0, 0, 2, 4, 10, 12, 10, 7, 10, 13, 15, 15, 15, 14, 13, 9, 8, 8, 4, 0, 2, 1, 0, 7, 8, 12, 10, 10, 13, 14, 15, 15, 13, 9, 6, 4, 4, 7, 3, 0, 0, 0, 0, 5, 8, 11, 13, 11, 12, 15, 15, 14, 12, 11, 9, 5, 4, 4, 4, 0, 0, 0, 1, 7, 10, 11, 11, 11, 11, 11, 12, 12, 10, 6, 5, 7, 7, 7, 8, 5, 2, 6, 9, 8, 9, 8, 9, 5, 8, 10, 11, 9, 9, 7, 6, 4, 8, 7, 6, 5, 3, 5, 7, 10, 11, 9, 8, 10, 9, 8, 12, 11, 6, 6, 5, 4, 4, 7, 6, 3, 2, 5, 8, 9, 10, 12, 12, 12, 11, 11, 11, 10, 8, 5, 5, 4, 4, 6, 2, 4, 5, 7, 9, 11, 10, 12, 12, 11, 8, 8, 10, 8, 6, 4, 5, 5, 4, 5, 5, 5, 7, 8, 10, 11, 10, 9, 9, 9, 9, 10, 9, 8, 7, 3, 3, 6, 4, 5, 8, 8, 8, 5, 8, 11, 10, 9, 11, 9, 9, 7, 8, 6, 5, 4, 5, 7, 7, 7, 9, 7, 7, 6, 8, 10, 11, 11, 9, 9, 8, 6, 8, 6, 6, 4, 5, 7, 5, 6, 6, 7, 8, 8, 9, 11, 10, 9, 7, 8, 8, 7, 9, 9, 7, 7, 5, 5, 5, 8, 8, 6, 8, 9, 8, 9, 8, 8, 8, 8, 8, 8, 7, 8, 6, 6, 6, 6, 8, 8, 8, 7, 7, 8, 8, 9, 9, 9, 7, 8, 7, 8, 9, 8, 7, 6, 6, 6, 8, 9, 7, 6, 7, 7, 7, 8, 9, 9, 9, 8, 8, 7, 8, 9, 7, 7, 7, 7, 7, 8, 7, 6, 6, 7, 8, 8, 8, 8, 8, 8, 7, 9, 9, 8, 7, 7, 7, 7, 7, 8, 7, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 8, 7, 8, 8, 8, 7, 7, 8, 8, 8, 8, 7, 7, 7, 6, 8, 8, 7, 8, 8, 8, 8, 7, 9, 8, 7, 8, 8, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 8, 7, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8 };
const unsigned int DPCMsnarehigh_C4_len = 875;

// Sample: DPCMstick_C4
// Sample Rate: 4000 Hz, Sample Count: 249
PROGMEM const uint8_t DPCMstick_C4[] = { 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 12, 11, 2, 9, 12, 5, 14, 14, 5, 3, 13, 6, 5, 13, 12, 9, 4, 11, 9, 12, 10, 3, 11, 10, 4, 4, 12, 15, 6, 5, 13, 15, 6, 3, 9, 15, 12, 3, 5, 14, 11, 2, 3, 12, 8, 0, 4, 12, 14, 6, 6, 14, 12, 4, 2, 11, 15, 9, 2, 7, 15, 9, 3, 11, 15, 12, 3, 4, 13, 14, 5, 5, 14, 13, 4, 3, 11, 14, 5, 4, 13, 14, 6, 4, 12, 14, 6, 3, 11, 13, 5, 3, 9, 13, 8, 2, 8, 14, 9, 2, 7, 14, 9, 3, 7, 13, 9, 4, 8, 11, 11, 6, 5, 11, 12, 6, 6, 11, 11, 7, 6, 10, 10, 8, 7, 8, 11, 10, 5, 9, 11, 9, 6, 8, 10, 8, 7, 8, 10, 9, 6, 8, 10, 9, 8, 8, 9, 9, 8, 7, 9, 9, 8, 7, 9, 9, 8, 8, 9, 9, 8, 7, 8, 9, 9, 7, 8, 9, 9, 8, 8, 9, 9, 8, 8, 9, 9, 8, 8, 9, 9, 8, 8, 9, 9, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 9, 9, 8, 8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 };
const unsigned int DPCMstick_C4_len = 249;

// Sample: DPCMsynthdrum_C4
// Sample Rate: 4000 Hz, Sample Count: 2048
PROGMEM const uint8_t DPCMsynthdrum_C4[] = { 7, 6, 6, 6, 6, 6, 6, 9, 11, 13, 12, 11, 7, 4, 3, 2, 3, 2, 3, 6, 8, 11, 14, 14, 15, 15, 15, 14, 12, 9, 6, 4, 1, 1, 1, 1, 4, 7, 10, 12, 13, 13, 13, 11, 10, 8, 5, 2, 0, 0, 0, 0, 3, 6, 9, 12, 14, 14, 14, 12, 12, 9, 7, 3, 1, 0, 0, 2, 4, 8, 9, 12, 14, 14, 14, 13, 12, 9, 8, 4, 3, 1, 0, 1, 3, 6, 9, 11, 12, 14, 14, 14, 12, 10, 9, 6, 3, 1, 0, 0, 1, 4, 7, 9, 12, 13, 14, 14, 13, 12, 10, 7, 5, 2, 1, 0, 0, 2, 4, 7, 9, 12, 13, 14, 14, 13, 12, 10, 8, 5, 3, 1, 0, 0, 2, 4, 7, 9, 11, 13, 14, 14, 14, 12, 11, 8, 6, 3, 1, 0, 0, 1, 3, 6, 8, 11, 12, 14, 14, 14, 13, 11, 9, 7, 5, 2, 0, 0, 0, 2, 4, 7, 9, 11, 13, 14, 14, 14, 12, 11, 9, 6, 4, 2, 0, 0, 1, 3, 5, 8, 10, 12, 13, 14, 14, 13, 12, 10, 8, 6, 4, 2, 0, 0, 1, 3, 5, 8, 10, 12, 13, 14, 14, 14, 12, 11, 9, 6, 4, 2, 0, 0, 0, 2, 4, 7, 9, 11, 13, 14, 14, 14, 13, 11, 9, 7, 5, 3, 1, 0, 0, 1, 3, 6, 8, 10, 12, 13, 14, 14, 13, 12, 11, 9, 7, 5, 3, 1, 0, 0, 2, 4, 6, 8, 10, 12, 13, 14, 14, 13, 12, 11, 9, 6, 4, 2, 1, 0, 0, 2, 4, 6, 8, 10, 12, 13, 14, 14, 14, 12, 11, 9, 7, 5, 3, 1, 0, 0, 1, 3, 5, 8, 10, 12, 13, 14, 14, 14, 13, 12, 10, 8, 5, 3, 1, 0, 0, 0, 2, 4, 7, 9, 11, 13, 14, 14, 14, 14, 13, 11, 9, 7, 4, 2, 1, 0, 0, 1, 2, 5, 7, 10, 11, 13, 14, 14, 14, 13, 12, 10, 8, 7, 5, 2, 1, 0, 1, 1, 3, 5, 7, 9, 11, 12, 13, 13, 14, 13, 12, 11, 9, 8, 6, 4, 2, 1, 0, 1, 2, 3, 5, 8, 10, 11, 13, 13, 14, 14, 13, 12, 11, 9, 7, 5, 3, 2, 0, 0, 0, 2, 4, 6, 8, 10, 12, 13, 14, 14, 14, 13, 12, 11, 9, 7, 5, 3, 1, 0, 0, 0, 1, 3, 6, 8, 10, 12, 13, 15, 15, 15, 14, 12, 11, 9, 7, 5, 2, 1, 0, 0, 0, 1, 4, 6, 8, 10, 12, 13, 14, 14, 14, 13, 12, 11, 9, 8, 6, 4, 2, 1, 0, 0, 1, 2, 4, 6, 8, 10, 11, 13, 14, 14, 14, 13, 12, 11, 10, 8, 6, 4, 2, 1, 0, 0, 1, 2, 4, 6, 8, 10, 12, 13, 14, 14, 14, 14, 13, 11, 10, 8, 6, 4, 3, 1, 0, 0, 0, 2, 4, 6, 8, 9, 11, 12, 13, 14, 14, 13, 13, 12, 11, 9, 8, 6, 4, 3, 1, 1, 0, 1, 2, 4, 5, 7, 9, 11, 12, 13, 14, 14, 14, 14, 12, 11, 10, 8, 6, 4, 2, 0, 0, 0, 0, 1, 3, 5, 7, 9, 11, 12, 14, 14, 15, 14, 14, 13, 11, 10, 8, 6, 4, 2, 1, 0, 0, 0, 1, 3, 5, 7, 8, 10, 11, 12, 13, 14, 14, 14, 13, 12, 11, 9, 8, 6, 4, 3, 1, 0, 0, 0, 1, 3, 5, 6, 8, 10, 11, 12, 13, 14, 14, 14, 13, 12, 11, 10, 8, 7, 5, 3, 2, 1, 0, 0, 1, 2, 4, 5, 7, 9, 10, 12, 13, 14, 14, 14, 14, 13, 12, 11, 10, 8, 6, 4, 2, 1, 0, 0, 0, 0, 2, 4, 6, 8, 10, 12, 13, 14, 15, 15, 15, 14, 13, 12, 10, 8, 7, 5, 3, 2, 1, 0, 0, 0, 1, 3, 5, 6, 8, 10, 11, 12, 13, 13, 14, 14, 13, 12, 12, 10, 9, 8, 6, 5, 4, 3, 2, 1, 1, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 13, 13, 13, 13, 12, 11, 10, 9, 8, 6, 5, 3, 2, 1, 0, 0, 0, 1, 3, 5, 7, 9, 10, 12, 13, 14, 15, 15, 14, 14, 13, 12, 10, 9, 7, 5, 3, 2, 1, 0, 0, 1, 2, 3, 4, 6, 7, 9, 9, 10, 11, 12, 12, 12, 13, 13, 12, 12, 12, 11, 10, 9, 8, 6, 5, 3, 2, 1, 0, 0, 0, 0, 2, 3, 6, 8, 10, 11, 13, 14, 15, 15, 15, 15, 14, 13, 12, 10, 8, 7, 5, 2, 1, 0, 0, 0, 0, 0, 2, 4, 5, 7, 9, 10, 11, 12, 13, 14, 14, 14, 13, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3, 2, 1, 1, 1, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 12, 13, 13, 13, 13, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 2, 1, 2, 2, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 13, 13, 13, 13, 12, 12, 11, 10, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 2, 2, 4, 5, 6, 8, 9, 10, 11, 12, 12, 13, 13, 13, 12, 12, 11, 10, 9, 8, 8, 7, 6, 5, 5, 4, 4, 4, 3, 3, 3, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 13, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 13, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 8, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 9, 8, 7, 7, 5, 4, 4, 3, 3, 2, 3, 3, 3, 4, 5, 6, 8, 9, 9, 10, 11, 11, 11, 12, 12, 11, 11, 10, 10, 9, 9, 8, 7, 7, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 11, 10, 10, 9, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 11, 11, 10, 10, 9, 8, 8, 7, 7, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 7, 6, 5, 5, 4, 3, 3, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 8, 7, 7, 7, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 7, 7, 7, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7 };
const unsigned int DPCMsynthdrum_C4_len = 2048;

// Sample: DPCMtaiko_C4
// Sample Rate: 4000 Hz, Sample Count: 2048
PROGMEM const uint8_t DPCMtaiko_C4[] = { 6, 4, 5, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 7, 11, 7, 4, 4, 9, 8, 10, 9, 8, 11, 13, 15, 15, 15, 15, 15, 14, 14, 15, 15, 14, 11, 9, 8, 5, 6, 7, 6, 7, 5, 6, 5, 2, 0, 0, 3, 5, 7, 9, 6, 4, 2, 1, 5, 6, 5, 4, 1, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 8, 9, 11, 12, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 12, 12, 10, 8, 9, 8, 10, 10, 8, 6, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 9, 12, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 12, 10, 7, 5, 5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 8, 9, 12, 12, 12, 13, 14, 12, 12, 13, 14, 14, 14, 14, 12, 10, 10, 9, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 6, 5, 5, 5, 4, 4, 4, 2, 1, 0, 0, 0, 0, 1, 2, 4, 6, 7, 9, 11, 12, 13, 12, 12, 12, 12, 14, 15, 15, 15, 15, 15, 15, 15, 13, 11, 10, 9, 8, 7, 6, 6, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 15, 15, 14, 14, 14, 14, 15, 15, 15, 14, 13, 12, 10, 9, 8, 7, 7, 7, 6, 6, 6, 7, 6, 5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 14, 14, 13, 11, 9, 8, 7, 6, 5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 6, 8, 9, 8, 9, 9, 9, 10, 12, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 14, 13, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 13, 13, 13, 12, 11, 9, 7, 5, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 5, 5, 6, 6, 7, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 13, 13, 13, 14, 14, 13, 12, 11, 10, 9, 9, 9, 8, 7, 6, 5, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1, 3, 4, 5, 6, 7, 8, 8, 8, 9, 9, 10, 11, 12, 13, 13, 14, 14, 14, 14, 13, 12, 11, 11, 11, 10, 10, 9, 9, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 2, 2, 4, 5, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 12, 11, 11, 10, 10, 10, 10, 10, 9, 8, 7, 6, 6, 5, 4, 3, 1, 0, 0, 0, 0, 0, 1, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 14, 14, 13, 12, 11, 11, 10, 10, 9, 8, 7, 6, 5, 4, 4, 3, 3, 2, 2, 1, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 8, 9, 9, 11, 12, 14, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 13, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13, 13, 14, 14, 13, 13, 13, 13, 13, 13, 12, 11, 11, 10, 9, 8, 7, 7, 6, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 9, 10, 11, 12, 12, 13, 13, 13, 13, 12, 12, 11, 11, 10, 9, 8, 7, 7, 7, 5, 4, 4, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 6, 6, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 7, 7, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 4, 5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 12, 12, 12, 12, 11, 10, 9, 8, 8, 7, 7, 6, 5, 5, 4, 4, 3, 3, 3, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10, 9, 8, 7, 7, 7, 6, 6, 6, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 12, 11, 12, 11, 11, 11, 10, 10, 9, 9, 9, 8, 7, 7, 7, 6, 6, 6, 5, 5, 4, 4, 3, 4, 3, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 11, 11, 11, 11, 11, 10, 10, 9, 9, 9, 8, 8, 7, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 7, 7, 7, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 10, 10, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 10, 9, 9, 8, 7, 7, 6, 6, 5, 4, 3, 3, 2, 2, 1, 1, 2, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 12, 12, 12, 12, 11, 10, 10, 9, 9, 8, 8, 7, 6, 6, 6, 5, 5, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 10, 9, 9, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 };
const unsigned int DPCMtaiko_C4_len = 2048;

// Sample: DPCMtick_C4
// Sample Rate: 4000 Hz, Sample Count: 353
PROGMEM const uint8_t DPCMtick_C4[] = { 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 7, 7, 7, 9, 10, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 7, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 9, 8, 8, 7, 7, 7, 8, 7, 9, 7, 8, 8, 9, 7, 9, 9, 12, 10, 6, 8, 15, 15, 15, 14, 11, 6, 11, 15, 5, 8, 15, 14, 5, 11, 7, 7, 8, 15, 3, 3, 9, 9, 8, 15, 14, 9, 9, 13, 2, 4, 15, 15, 11, 12, 13, 6, 0, 8, 12, 9, 12, 15, 12, 6, 10, 4, 8, 10, 15, 9, 12, 10, 12, 2, 3, 10, 12, 7, 13, 14, 4, 5, 7, 10, 9, 9, 10, 9, 5, 9, 9, 8, 9, 11, 8, 8, 8, 9, 8, 10, 10, 8, 6, 10, 8, 7, 9, 9, 7, 8, 7, 9, 5, 10, 9, 8, 7, 10, 7, 8, 8, 9, 6, 8, 8, 7, 6, 8, 8, 8, 9, 9, 8, 8, 7, 7, 7, 8, 9, 9, 8, 7, 8, 8, 7, 8, 8, 8, 8, 9, 8, 6, 7, 8, 7, 8, 7, 8, 7, 8, 8, 8, 7, 9, 7, 7, 8, 7, 7, 8, 7, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 8, 7, 7, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int DPCMtick_C4_len = 353;

// Sample: DPCMtimbA1_A_1
// Sample Rate: 4000 Hz, Sample Count: 2048
PROGMEM const uint8_t DPCMtimbA1_A_1[] = { 7, 8, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 5, 3, 0, 0, 0, 0, 0, 4, 5, 8, 13, 13, 12, 13, 13, 8, 3, 4, 2, 1, 0, 0, 3, 8, 13, 15, 15, 15, 15, 13, 10, 7, 6, 1, 0, 0, 0, 0, 5, 9, 13, 15, 15, 15, 15, 11, 11, 9, 4, 6, 9, 7, 11, 9, 9, 6, 7, 11, 11, 8, 5, 5, 7, 8, 3, 0, 3, 7, 9, 10, 11, 12, 8, 6, 6, 10, 12, 10, 10, 7, 5, 5, 9, 11, 12, 9, 11, 10, 6, 2, 3, 6, 8, 5, 2, 5, 8, 10, 7, 8, 11, 11, 9, 10, 6, 3, 0, 6, 9, 11, 13, 12, 12, 11, 11, 9, 9, 5, 2, 0, 1, 0, 0, 0, 1, 7, 11, 14, 12, 15, 15, 14, 13, 11, 10, 13, 11, 7, 3, 1, 6, 6, 8, 7, 8, 5, 2, 1, 0, 4, 5, 6, 10, 9, 11, 9, 11, 10, 13, 15, 14, 12, 11, 7, 7, 5, 4, 5, 3, 7, 6, 0, 0, 0, 4, 5, 8, 8, 12, 12, 15, 13, 12, 14, 14, 15, 11, 9, 6, 4, 0, 0, 2, 4, 6, 5, 0, 0, 3, 5, 8, 11, 13, 14, 10, 10, 7, 10, 12, 12, 13, 11, 13, 12, 7, 6, 6, 6, 5, 2, 2, 0, 0, 0, 0, 1, 6, 10, 13, 14, 15, 14, 14, 13, 15, 14, 11, 11, 7, 5, 2, 0, 0, 0, 1, 5, 4, 3, 3, 4, 6, 10, 13, 14, 11, 10, 11, 9, 9, 11, 12, 12, 11, 10, 9, 7, 7, 6, 5, 5, 5, 0, 0, 0, 1, 0, 2, 9, 11, 11, 14, 14, 14, 14, 15, 15, 13, 10, 8, 5, 4, 2, 3, 0, 2, 4, 6, 4, 6, 6, 4, 6, 9, 11, 10, 10, 10, 9, 8, 10, 12, 11, 11, 12, 10, 7, 6, 7, 7, 7, 6, 4, 0, 2, 3, 0, 1, 7, 9, 9, 9, 11, 12, 11, 14, 14, 15, 13, 11, 8, 5, 6, 6, 4, 1, 2, 4, 2, 4, 3, 7, 6, 9, 11, 9, 10, 11, 10, 7, 10, 11, 10, 9, 12, 12, 8, 7, 9, 8, 7, 8, 6, 2, 1, 0, 0, 0, 4, 6, 5, 10, 11, 12, 11, 13, 13, 15, 13, 14, 10, 8, 6, 6, 5, 3, 4, 5, 2, 0, 4, 6, 4, 6, 10, 10, 9, 8, 11, 9, 8, 11, 10, 10, 12, 12, 9, 8, 8, 8, 6, 9, 9, 6, 2, 2, 0, 0, 1, 3, 7, 5, 10, 10, 10, 11, 13, 13, 14, 13, 13, 11, 8, 6, 6, 5, 4, 2, 3, 3, 3, 5, 4, 5, 10, 9, 8, 9, 10, 9, 9, 9, 10, 8, 10, 11, 10, 9, 11, 9, 6, 6, 8, 8, 5, 5, 4, 1, 0, 2, 3, 6, 7, 7, 10, 10, 12, 12, 12, 14, 13, 11, 10, 9, 7, 6, 4, 4, 6, 2, 2, 2, 2, 7, 8, 10, 8, 9, 9, 9, 8, 9, 10, 10, 8, 8, 9, 9, 10, 9, 9, 7, 9, 8, 5, 5, 6, 4, 3, 1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 12, 13, 12, 11, 11, 9, 7, 7, 5, 5, 4, 2, 3, 5, 3, 5, 7, 9, 9, 9, 8, 8, 8, 10, 9, 10, 10, 10, 9, 7, 9, 10, 9, 10, 8, 6, 7, 8, 6, 2, 3, 3, 3, 5, 4, 5, 5, 8, 9, 12, 13, 13, 12, 12, 11, 11, 8, 7, 6, 7, 4, 5, 4, 3, 3, 3, 7, 8, 7, 8, 9, 9, 9, 8, 8, 8, 10, 10, 8, 8, 9, 8, 9, 9, 8, 9, 8, 7, 6, 5, 5, 4, 2, 3, 5, 5, 5, 7, 8, 9, 10, 11, 12, 12, 13, 11, 9, 8, 8, 7, 7, 6, 4, 3, 2, 5, 4, 5, 6, 8, 10, 9, 9, 9, 8, 7, 9, 9, 9, 8, 8, 9, 8, 9, 10, 8, 8, 8, 6, 7, 6, 5, 3, 4, 4, 5, 3, 6, 8, 8, 8, 9, 10, 11, 12, 12, 12, 10, 9, 8, 7, 5, 6, 4, 3, 4, 5, 5, 4, 8, 8, 8, 9, 9, 9, 9, 8, 9, 7, 8, 10, 9, 9, 9, 8, 8, 9, 9, 8, 7, 7, 6, 6, 5, 6, 4, 3, 2, 6, 7, 7, 9, 10, 11, 10, 11, 12, 10, 10, 10, 8, 7, 6, 5, 4, 4, 6, 3, 5, 7, 8, 7, 7, 8, 8, 8, 9, 9, 9, 8, 8, 9, 7, 8, 8, 8, 8, 9, 9, 8, 8, 7, 7, 5, 5, 5, 5, 3, 5, 5, 5, 7, 9, 10, 10, 11, 10, 10, 10, 10, 10, 8, 7, 8, 5, 6, 4, 4, 2, 4, 8, 7, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 7, 8, 8, 8, 7, 9, 9, 9, 8, 7, 7, 6, 5, 5, 6, 4, 5, 7, 5, 4, 7, 8, 9, 9, 11, 10, 10, 11, 10, 9, 9, 7, 7, 6, 6, 5, 4, 3, 4, 5, 7, 9, 10, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 7, 6, 5, 5, 5, 6, 6, 5, 5, 7, 7, 9, 10, 10, 10, 10, 10, 10, 9, 9, 8, 6, 6, 6, 6, 4, 5, 5, 6, 6, 7, 8, 9, 10, 8, 8, 8, 8, 8, 8, 9, 8, 7, 8, 8, 7, 7, 9, 9, 8, 8, 8, 7, 7, 5, 4, 5, 6, 6, 5, 7, 8, 8, 9, 10, 10, 11, 9, 9, 9, 9, 8, 7, 7, 6, 5, 5, 6, 5, 4, 6, 7, 8, 9, 9, 9, 9, 9, 8, 7, 7, 7, 8, 7, 8, 8, 7, 8, 8, 8, 8, 8, 8, 7, 7, 6, 4, 6, 5, 5, 7, 8, 8, 7, 8, 10, 9, 9, 10, 9, 10, 9, 8, 7, 7, 6, 5, 5, 5, 4, 6, 7, 7, 8, 9, 9, 8, 9, 8, 8, 8, 8, 8, 7, 7, 8, 7, 8, 9, 8, 8, 8, 7, 6, 7, 7, 7, 6, 6, 6, 4, 6, 6, 7, 8, 8, 10, 10, 9, 10, 10, 9, 9, 8, 7, 7, 6, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 9, 9, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 9, 8, 9, 8, 7, 8, 7, 6, 7, 7, 6, 4, 5, 6, 6, 8, 9, 9, 9, 10, 9, 9, 8, 9, 8, 7, 8, 7, 6, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 9, 8, 8, 8, 7, 8, 8, 7, 7, 7, 8, 7, 7, 9, 9, 8, 8, 8, 7, 5, 7, 7, 6, 7, 7, 6, 5, 7, 8, 8, 9, 10, 9, 9, 9, 9, 8, 8, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 8, 9, 8, 8, 8, 8, 8, 7, 7, 8, 7, 7, 7, 7, 7, 8, 9, 8, 8, 8, 8, 7, 7, 7, 6, 5, 7, 7, 5, 6, 7, 7, 8, 8, 9, 10, 9, 9, 9, 8, 8, 7, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 8, 9, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8, 7, 8, 7, 6, 6, 7, 6, 5, 7, 7, 7, 8, 9, 8, 8, 9, 9, 9, 9, 9, 8, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 7, 8, 8, 9, 9, 8, 8, 7, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8, 8, 9, 9, 8, 8, 7, 6, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 7, 7, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 8, 8, 9, 8, 8, 8, 7, 7, 6, 5, 6, 7, 7, 7, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 7, 7, 7, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 7, 7, 7, 6, 7, 6, 7, 7, 7, 8, 8, 8, 8, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 7, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 7, 7, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 8, 8, 8, 7, 7, 7, 7, 7, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int DPCMtimbA1_A_1_len = 2048;

// Sample: DPCMtimbA1_A1
// Sample Rate: 4000 Hz, Sample Count: 2048
PROGMEM const uint8_t DPCMtimbA1_A1[] = { 7, 8, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 3, 3, 0, 0, 0, 0, 0, 0, 6, 6, 9, 15, 14, 13, 13, 14, 10, 4, 4, 4, 1, 2, 0, 0, 6, 11, 15, 15, 15, 15, 15, 13, 10, 7, 7, 3, 0, 0, 0, 0, 2, 7, 10, 14, 15, 15, 15, 15, 11, 10, 9, 4, 5, 9, 7, 9, 11, 9, 8, 4, 8, 11, 11, 8, 6, 5, 7, 8, 3, 0, 1, 7, 9, 9, 11, 12, 11, 8, 6, 7, 10, 12, 10, 10, 7, 6, 5, 8, 10, 12, 10, 9, 12, 8, 4, 0, 5, 6, 9, 4, 2, 5, 7, 10, 7, 8, 10, 12, 10, 10, 8, 4, 2, 1, 7, 9, 11, 13, 12, 13, 11, 11, 9, 10, 7, 4, 1, 0, 1, 0, 0, 0, 2, 7, 12, 14, 12, 15, 15, 14, 13, 11, 10, 11, 13, 8, 5, 0, 4, 7, 7, 8, 7, 9, 5, 2, 1, 0, 3, 6, 5, 10, 9, 11, 10, 10, 11, 11, 13, 15, 13, 12, 10, 7, 6, 6, 4, 5, 3, 4, 8, 2, 0, 0, 1, 4, 6, 8, 8, 12, 12, 15, 13, 11, 14, 13, 15, 13, 10, 8, 5, 2, 0, 0, 2, 4, 6, 5, 0, 0, 2, 5, 7, 11, 12, 14, 12, 10, 9, 7, 11, 12, 11, 13, 10, 13, 12, 8, 6, 7, 5, 6, 3, 2, 1, 0, 0, 0, 0, 2, 6, 11, 14, 14, 15, 14, 14, 13, 15, 15, 12, 11, 9, 6, 5, 1, 1, 0, 0, 2, 6, 3, 4, 3, 4, 4, 9, 12, 15, 12, 11, 10, 11, 8, 10, 11, 12, 12, 11, 9, 9, 7, 7, 6, 6, 4, 6, 2, 0, 0, 0, 1, 0, 3, 10, 11, 11, 14, 14, 14, 14, 15, 15, 13, 11, 10, 6, 5, 3, 2, 2, 0, 2, 4, 6, 5, 6, 7, 4, 6, 8, 11, 10, 11, 10, 11, 8, 8, 10, 13, 10, 11, 12, 10, 7, 6, 7, 7, 7, 7, 6, 1, 0, 3, 2, 0, 1, 7, 9, 9, 9, 10, 12, 11, 14, 14, 15, 14, 12, 9, 7, 5, 7, 5, 4, 0, 3, 3, 3, 3, 4, 6, 7, 6, 12, 9, 10, 9, 11, 8, 8, 10, 11, 9, 10, 11, 12, 8, 7, 8, 9, 7, 8, 7, 4, 2, 0, 0, 0, 0, 5, 6, 6, 10, 11, 12, 11, 13, 12, 15, 13, 14, 13, 9, 7, 5, 6, 5, 2, 4, 5, 3, 0, 4, 5, 5, 5, 10, 9, 10, 8, 10, 10, 9, 8, 11, 9, 10, 12, 12, 9, 8, 7, 8, 7, 8, 9, 7, 4, 2, 2, 0, 1, 1, 5, 7, 5, 10, 10, 10, 11, 13, 13, 14, 14, 13, 12, 10, 6, 6, 6, 4, 4, 2, 3, 3, 3, 5, 5, 4, 8, 10, 9, 8, 10, 10, 9, 9, 9, 10, 8, 10, 10, 10, 9, 11, 10, 6, 6, 8, 8, 6, 5, 5, 3, 0, 0, 3, 3, 6, 7, 7, 10, 10, 12, 12, 11, 13, 14, 12, 11, 10, 8, 7, 6, 3, 4, 5, 2, 2, 3, 2, 6, 8, 9, 9, 7, 10, 9, 9, 7, 10, 9, 10, 8, 8, 9, 9, 10, 9, 9, 7, 9, 9, 6, 5, 6, 6, 4, 2, 2, 3, 4, 5, 6, 7, 8, 10, 10, 12, 12, 13, 13, 11, 11, 10, 8, 7, 6, 5, 5, 4, 2, 2, 6, 3, 5, 7, 8, 9, 9, 9, 8, 7, 8, 10, 8, 9, 10, 9, 9, 7, 8, 10, 9, 10, 10, 6, 6, 7, 8, 4, 2, 3, 3, 3, 5, 4, 5, 5, 8, 8, 11, 12, 13, 12, 12, 11, 11, 10, 8, 7, 7, 7, 4, 5, 4, 2, 3, 3, 6, 8, 8, 7, 9, 8, 9, 9, 8, 8, 8, 10, 10, 8, 8, 9, 8, 9, 9, 8, 9, 9, 7, 7, 6, 5, 5, 3, 1, 3, 5, 5, 5, 6, 8, 8, 10, 10, 12, 12, 13, 12, 10, 9, 8, 8, 7, 6, 6, 4, 4, 2, 5, 5, 4, 6, 7, 9, 10, 9, 9, 9, 7, 8, 9, 9, 9, 8, 8, 8, 9, 8, 10, 9, 8, 8, 7, 6, 7, 6, 5, 3, 4, 4, 5, 3, 5, 8, 8, 9, 8, 10, 10, 12, 12, 13, 11, 10, 8, 8, 6, 6, 6, 4, 3, 4, 4, 6, 4, 6, 8, 8, 8, 9, 9, 9, 8, 8, 9, 7, 8, 10, 8, 9, 8, 9, 7, 9, 9, 9, 7, 7, 6, 6, 6, 6, 6, 4, 3, 3, 5, 7, 7, 8, 10, 10, 10, 10, 12, 12, 10, 10, 10, 8, 7, 6, 5, 4, 4, 6, 4, 4, 7, 7, 8, 7, 7, 9, 8, 8, 9, 9, 8, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 9, 8, 7, 7, 7, 5, 5, 5, 5, 3, 4, 6, 5, 6, 8, 10, 10, 11, 11, 10, 10, 10, 10, 10, 8, 7, 8, 6, 5, 5, 4, 3, 2, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 7, 8, 8, 8, 7, 8, 9, 9, 9, 8, 7, 7, 6, 5, 5, 6, 4, 5, 6, 6, 4, 6, 8, 9, 9, 10, 11, 10, 10, 11, 10, 9, 9, 7, 7, 7, 6, 5, 4, 4, 3, 4, 6, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 7, 8, 9, 8, 8, 8, 8, 8, 7, 6, 5, 6, 5, 6, 6, 6, 4, 6, 7, 8, 10, 10, 10, 11, 10, 11, 10, 9, 9, 8, 6, 6, 6, 6, 4, 4, 5, 6, 6, 6, 8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 9, 8, 7, 7, 8, 7, 7, 8, 9, 9, 8, 8, 8, 7, 7, 5, 4, 5, 6, 6, 6, 6, 8, 8, 8, 10, 10, 11, 11, 9, 9, 9, 9, 8, 7, 7, 6, 6, 5, 5, 5, 4, 5, 7, 7, 9, 9, 9, 9, 9, 9, 8, 7, 7, 7, 7, 7, 8, 9, 7, 8, 9, 8, 8, 8, 8, 8, 7, 7, 6, 4, 5, 5, 4, 6, 7, 8, 8, 8, 9, 10, 9, 10, 10, 9, 10, 9, 8, 7, 7, 6, 5, 5, 5, 4, 5, 7, 7, 7, 8, 9, 9, 8, 9, 8, 8, 8, 8, 8, 7, 7, 8, 7, 7, 8, 9, 8, 8, 8, 7, 6, 8, 7, 7, 6, 5, 6, 5, 5, 6, 6, 8, 8, 9, 10, 10, 9, 10, 10, 9, 9, 8, 7, 7, 7, 6, 6, 5, 5, 6, 6, 7, 7, 8, 8, 7, 8, 9, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 9, 8, 9, 9, 8, 7, 8, 7, 6, 7, 7, 7, 5, 4, 5, 6, 6, 8, 9, 9, 9, 10, 9, 9, 8, 9, 8, 7, 8, 7, 7, 6, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 9, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 8, 7, 8, 9, 9, 8, 8, 8, 7, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 8, 8, 9, 10, 9, 9, 9, 9, 8, 8, 8, 7, 6, 6, 7, 5, 5, 5, 6, 8, 7, 8, 9, 8, 8, 8, 8, 9, 8, 7, 7, 8, 7, 7, 7, 7, 7, 8, 9, 8, 8, 8, 8, 7, 7, 8, 7, 6, 6, 8, 6, 5, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 8, 8, 7, 7, 6, 7, 6, 6, 6, 7, 7, 6, 7, 7, 9, 9, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 8, 9, 8, 8, 9, 9, 9, 9, 9, 8, 7, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 7, 8, 8, 9, 9, 9, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8, 8, 9, 9, 8, 8, 7, 6, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 8, 8, 9, 9, 8, 8, 9, 8, 8, 8, 8, 7, 6, 5, 5, 6, 7, 7, 7, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 6, 6, 7, 6, 7, 7, 7, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 7, 7, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7 };
const unsigned int DPCMtimbA1_A1_len = 2048;

// Sample: NOISEhihat909_C4
// Sample Rate: 4000 Hz, Sample Count: 406
PROGMEM const uint8_t NOISEhihat909_C4[] = { 8, 8, 7, 8, 7, 8, 7, 9, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 9, 9, 8, 8, 9, 9, 9, 8, 9, 10, 7, 8, 7, 7, 7, 8, 8, 8, 9, 8, 10, 7, 8, 7, 8, 8, 9, 7, 8, 8, 7, 8, 9, 8, 9, 8, 9, 9, 8, 8, 8, 8, 8, 9, 7, 7, 7, 8, 9, 6, 7, 7, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8, 9, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 7, 8, 8, 7, 8, 7, 8, 7, 8, 8, 8, 8, 9, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 6, 7, 8, 8, 8, 7, 9, 8, 5, 8, 6, 8, 7, 8, 7, 7, 7, 8, 8, 7, 8, 7, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 7, 9, 7, 6, 8, 7, 7, 8, 9, 7, 7, 7, 7, 8, 8, 7, 7, 8, 7, 7, 7, 8, 8, 8, 7, 9, 8, 7, 8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 8, 7, 7, 8, 7, 7, 7, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 7, 7, 8, 8, 7, 7, 8, 7, 8, 8, 7, 8, 8, 6, 8, 7, 7, 7, 7, 8, 8, 8, 6, 8, 7, 7, 8, 7, 7, 7, 7, 8, 8, 7, 8, 8, 8, 8, 8, 7, 7, 8, 7, 8, 8, 8, 8, 8, 6, 7, 7, 7, 6, 7, 7, 8, 7, 7, 8, 8, 7, 7, 8, 8, 8, 7, 6, 7, 7, 8, 7, 7, 7, 8, 8, 7, 7, 7, 9, 7, 8, 8, 7, 8, 7, 8, 8, 8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 9, 7, 6, 8, 7, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 8, 8, 8, 6, 8, 7, 7, 7, 8, 7, 7, 7, 8, 8, 7, 9, 7, 6, 7, 7, 7, 7, 8, 7, 8, 8, 7, 9, 8, 6, 7, 7, 8, 7, 7, 8, 7, 7, 7, 8, 9, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 7, 7, 8, 8, 8, 6, 7, 7, 7, 7, 9, 7, 7, 7, 8, 8, 8 };
const unsigned int NOISEhihat909_C4_len = 406;

// Sample: NOISEhihatclosed_C4
// Sample Rate: 4000 Hz, Sample Count: 136
PROGMEM const uint8_t NOISEhihatclosed_C4[] = { 6, 8, 7, 8, 11, 15, 8, 10, 9, 11, 10, 11, 12, 12, 10, 7, 8, 9, 9, 11, 8, 9, 10, 8, 8, 9, 11, 10, 10, 9, 11, 8, 7, 10, 5, 8, 7, 9, 8, 10, 8, 11, 7, 7, 7, 8, 9, 9, 9, 8, 9, 7, 9, 9, 9, 8, 9, 9, 10, 8, 7, 9, 9, 8, 10, 7, 6, 9, 8, 10, 6, 7, 7, 8, 7, 9, 8, 9, 8, 7, 9, 8, 9, 9, 7, 7, 9, 7, 6, 9, 7, 8, 6, 9, 8, 9, 7, 8, 9, 8, 8, 8, 8, 9, 6, 8, 8, 7, 9, 8, 7, 9, 7, 9, 7, 9, 7, 7, 7, 8, 8, 7, 6, 8, 7, 9, 8, 8, 9, 7, 7, 8, 9, 7, 5, 6 };
const unsigned int NOISEhihatclosed_C4_len = 136;

// Sample: NOISEhihatopen_C4
// Sample Rate: 4000 Hz, Sample Count: 1220
PROGMEM const uint8_t NOISEhihatopen_C4[] = { 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 9, 12, 12, 11, 10, 9, 10, 10, 10, 10, 10, 10, 10, 7, 9, 8, 9, 11, 8, 6, 9, 8, 9, 9, 9, 7, 8, 7, 8, 8, 8, 9, 10, 8, 8, 8, 7, 8, 9, 10, 7, 8, 7, 7, 8, 9, 9, 7, 8, 7, 8, 8, 10, 7, 8, 7, 7, 8, 9, 9, 7, 8, 8, 8, 10, 6, 9, 7, 8, 8, 8, 8, 8, 9, 6, 9, 6, 9, 8, 8, 6, 8, 9, 8, 9, 9, 7, 7, 8, 7, 8, 8, 9, 6, 5, 7, 9, 8, 8, 9, 5, 6, 8, 9, 7, 9, 7, 5, 7, 9, 9, 7, 9, 6, 5, 7, 9, 8, 8, 8, 6, 6, 7, 7, 8, 9, 6, 8, 5, 7, 8, 9, 10, 5, 8, 8, 6, 7, 8, 9, 7, 8, 7, 7, 6, 9, 9, 5, 6, 7, 7, 7, 6, 8, 4, 6, 6, 9, 6, 8, 7, 5, 6, 8, 8, 6, 9, 5, 6, 7, 8, 7, 7, 8, 4, 7, 7, 9, 6, 9, 7, 8, 10, 6, 9, 7, 9, 8, 10, 6, 7, 8, 6, 8, 8, 8, 8, 7, 9, 10, 6, 6, 7, 7, 7, 8, 6, 5, 7, 6, 7, 7, 7, 8, 5, 7, 6, 8, 7, 8, 7, 6, 7, 7, 8, 7, 9, 6, 7, 7, 7, 7, 8, 9, 5, 8, 6, 8, 7, 9, 7, 8, 6, 7, 7, 8, 7, 7, 8, 6, 9, 6, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 8, 7, 6, 7, 8, 6, 7, 7, 8, 8, 6, 8, 6, 7, 7, 9, 7, 7, 8, 6, 7, 7, 9, 6, 8, 6, 7, 7, 8, 8, 7, 8, 6, 7, 7, 7, 9, 5, 7, 7, 8, 7, 7, 8, 9, 7, 7, 8, 7, 8, 8, 6, 8, 8, 8, 6, 5, 6, 7, 7, 7, 7, 8, 9, 5, 7, 6, 7, 7, 6, 7, 6, 7, 6, 8, 6, 7, 7, 6, 7, 7, 8, 6, 8, 6, 7, 7, 8, 7, 6, 8, 6, 8, 7, 9, 9, 8, 8, 8, 8, 7, 9, 8, 5, 7, 6, 8, 7, 10, 6, 7, 7, 7, 7, 8, 8, 7, 8, 8, 9, 7, 8, 8, 8, 8, 7, 7, 8, 9, 6, 8, 7, 7, 7, 7, 7, 6, 8, 6, 7, 6, 9, 6, 7, 7, 6, 7, 7, 8, 6, 8, 7, 7, 7, 8, 7, 7, 8, 7, 8, 8, 7, 7, 8, 8, 6, 8, 6, 7, 7, 7, 7, 8, 8, 6, 7, 6, 7, 7, 8, 7, 8, 8, 8, 8, 7, 8, 7, 7, 8, 8, 8, 7, 8, 6, 8, 7, 8, 7, 7, 7, 6, 8, 7, 8, 7, 8, 6, 7, 7, 8, 8, 7, 7, 7, 8, 6, 7, 6, 8, 7, 9, 6, 7, 7, 6, 8, 7, 7, 7, 8, 8, 8, 7, 8, 7, 6, 8, 7, 7, 8, 8, 7, 7, 7, 9, 7, 8, 7, 6, 7, 8, 8, 7, 8, 6, 6, 7, 8, 8, 8, 8, 6, 7, 7, 9, 7, 8, 7, 6, 7, 8, 8, 8, 8, 8, 7, 6, 8, 8, 7, 7, 8, 8, 8, 6, 7, 7, 7, 7, 9, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 8, 8, 7, 8, 6, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 6, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 8, 7, 8, 7, 7, 6, 7, 7, 7, 7, 7, 8, 8, 7, 6, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 8, 8, 7, 8, 7, 7, 8, 8, 8, 7, 8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 8, 7, 8, 7, 7, 8, 7, 8, 7, 8, 8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 8, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 8, 7, 7, 8, 7, 8, 8, 7, 8, 7, 8, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 8, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int NOISEhihatopen_C4_len = 1220;

// Sample: NOISEhihatvibra_C4
// Sample Rate: 4000 Hz, Sample Count: 1171
PROGMEM const uint8_t NOISEhihatvibra_C4[] = { 8, 8, 7, 9, 7, 10, 7, 10, 7, 12, 7, 10, 7, 11, 8, 11, 8, 13, 11, 6, 9, 8, 10, 8, 9, 11, 11, 9, 8, 10, 11, 11, 11, 8, 7, 9, 9, 12, 8, 14, 13, 7, 10, 12, 12, 10, 8, 5, 8, 8, 11, 8, 11, 15, 6, 9, 11, 12, 9, 9, 5, 7, 7, 10, 11, 8, 7, 8, 9, 8, 8, 10, 10, 11, 7, 9, 10, 8, 8, 11, 6, 8, 8, 7, 8, 10, 12, 7, 6, 8, 6, 7, 8, 10, 6, 10, 8, 6, 8, 9, 12, 6, 9, 8, 8, 8, 9, 7, 8, 9, 5, 8, 7, 12, 7, 7, 9, 8, 7, 9, 8, 7, 9, 7, 10, 6, 7, 9, 9, 7, 8, 9, 9, 7, 8, 6, 8, 9, 8, 9, 8, 8, 9, 7, 6, 6, 8, 10, 6, 8, 7, 8, 9, 10, 6, 6, 7, 7, 8, 6, 9, 7, 8, 9, 7, 8, 10, 7, 5, 7, 6, 9, 6, 8, 7, 7, 9, 8, 7, 10, 9, 5, 7, 6, 5, 6, 7, 8, 8, 6, 10, 11, 3, 8, 5, 7, 7, 6, 8, 5, 6, 7, 9, 7, 9, 7, 10, 7, 9, 8, 9, 7, 10, 7, 6, 7, 11, 8, 6, 6, 6, 7, 7, 7, 5, 9, 8, 6, 7, 10, 10, 6, 7, 5, 7, 6, 8, 5, 8, 9, 7, 6, 9, 10, 8, 6, 6, 6, 7, 10, 7, 6, 8, 7, 7, 9, 7, 6, 9, 8, 6, 9, 8, 5, 9, 8, 6, 7, 7, 8, 8, 8, 7, 7, 8, 4, 8, 6, 9, 9, 6, 8, 7, 7, 8, 8, 6, 9, 5, 6, 7, 8, 10, 6, 7, 7, 7, 8, 8, 6, 8, 7, 5, 9, 5, 5, 6, 7, 9, 6, 7, 9, 8, 7, 8, 6, 8, 9, 9, 6, 7, 7, 6, 9, 6, 6, 7, 8, 8, 8, 8, 6, 7, 6, 8, 6, 7, 6, 6, 9, 5, 9, 7, 9, 7, 7, 7, 7, 7, 6, 7, 5, 9, 6, 8, 8, 8, 9, 6, 7, 6, 8, 5, 7, 6, 6, 7, 7, 6, 6, 8, 8, 8, 6, 9, 10, 7, 6, 7, 4, 7, 6, 8, 6, 8, 8, 8, 5, 5, 7, 6, 7, 6, 8, 10, 6, 7, 10, 9, 7, 7, 6, 7, 6, 7, 7, 7, 10, 7, 6, 9, 9, 7, 8, 6, 6, 7, 7, 7, 6, 9, 9, 5, 7, 6, 6, 6, 9, 7, 6, 8, 6, 8, 7, 8, 8, 8, 6, 8, 7, 8, 6, 6, 7, 7, 7, 7, 7, 8, 7, 6, 7, 7, 8, 7, 6, 6, 5, 7, 6, 9, 7, 7, 9, 7, 7, 8, 8, 6, 7, 5, 6, 6, 7, 8, 6, 9, 7, 7, 7, 8, 6, 7, 6, 6, 8, 8, 6, 7, 7, 8, 6, 6, 8, 6, 8, 7, 8, 8, 6, 6, 8, 6, 8, 6, 8, 7, 8, 7, 7, 7, 7, 8, 8, 6, 7, 7, 7, 7, 6, 8, 6, 7, 8, 6, 8, 8, 6, 6, 7, 7, 7, 6, 7, 7, 6, 8, 7, 7, 8, 7, 6, 7, 6, 7, 6, 9, 5, 7, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 6, 6, 6, 7, 6, 7, 7, 7, 8, 7, 8, 7, 7, 8, 8, 7, 7, 6, 6, 7, 7, 8, 7, 8, 7, 7, 8, 8, 7, 7, 6, 6, 7, 7, 8, 7, 7, 8, 8, 6, 7, 7, 7, 8, 8, 7, 7, 7, 7, 8, 8, 7, 6, 6, 6, 7, 7, 7, 6, 7, 7, 7, 7, 7, 8, 8, 6, 7, 7, 8, 7, 7, 7, 7, 6, 8, 7, 7, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 7, 8, 7, 8, 7, 6, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 8, 7, 8, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7 };
const unsigned int NOISEhihatvibra_C4_len = 1171;

// Sample: NOISEtiny1_C4
// Sample Rate: 4000 Hz, Sample Count: 308
PROGMEM const uint8_t NOISEtiny1_C4[] = { 8, 7, 8, 7, 10, 15, 15, 15, 15, 9, 6, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 9, 15, 15, 15, 15, 10, 5, 7, 5, 8, 15, 15, 15, 15, 15, 15, 15, 15, 14, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14, 15, 15, 14, 15, 14, 14, 14, 14, 5, 4, 4, 4, 4, 4, 4, 5, 4, 13, 15, 14, 14, 14, 13, 14, 13, 14, 5, 3, 4, 3, 4, 4, 4, 4, 3, 11, 14, 13, 14, 13, 13, 13, 13, 13, 13, 13, 12, 13, 11, 2, 2, 3, 2, 8, 14, 12, 13, 11, 3, 2, 3, 2, 8, 14, 12, 13, 11, 3, 2, 3, 2, 7, 13, 12, 13, 12, 4, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7 };
const unsigned int NOISEtiny1_C4_len = 308;

// Sample: NOISEtiny2_C4
// Sample Rate: 4000 Hz, Sample Count: 310
PROGMEM const uint8_t NOISEtiny2_C4[] = { 8, 7, 8, 7, 10, 15, 15, 8, 7, 7, 7, 7, 6, 10, 15, 15, 8, 6, 14, 15, 15, 15, 14, 6, 6, 6, 5, 12, 15, 15, 15, 13, 6, 5, 6, 5, 11, 15, 14, 15, 13, 5, 4, 5, 4, 10, 15, 14, 15, 14, 14, 14, 7, 2, 9, 15, 12, 3, 4, 12, 15, 7, 2, 8, 15, 12, 4, 4, 12, 14, 8, 2, 7, 14, 12, 4, 3, 11, 15, 8, 3, 4, 3, 4, 13, 14, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 0, 4, 11, 10, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
const unsigned int NOISEtiny2_C4_len = 310;

// Sample: NOISEtiny3_C4
// Sample Rate: 4000 Hz, Sample Count: 289
PROGMEM const uint8_t NOISEtiny3_C4[] = { 7, 8, 7, 7, 9, 15, 10, 7, 7, 7, 7, 12, 15, 8, 8, 15, 15, 15, 9, 6, 6, 9, 15, 15, 15, 7, 6, 5, 11, 15, 15, 15, 5, 6, 4, 12, 15, 15, 15, 15, 9, 3, 14, 13, 4, 9, 15, 6, 5, 15, 11, 3, 11, 14, 4, 6, 15, 8, 3, 13, 13, 3, 5, 3, 12, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 1, 12, 9, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 12, 14, 13, 13, 14, 6, 2, 4, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8 };
const unsigned int NOISEtiny3_C4_len = 289;

//----------------- Reverb Global Variables -----------------
// Define a small circular buffer for the delay
#define REVERB_BUFFER_SIZE 256
#define REVERB_DELAY_SAMPLES 64   // Delay length in samples (adjust as desired)
volatile uint8_t reverbBuffer[REVERB_BUFFER_SIZE];
volatile uint16_t reverbWriteIndex = 0;
// The reverb mix (0-100%) will be controlled by the mod wheel (CC2 in this example)
volatile uint8_t reverbMix = 0;      // 0 = no reverb, 100 = full reverb
// A fixed feedback percentage to feed some of the wet signal back into the delay
volatile uint8_t reverbFeedback = 15;  // Adjust as desired

//----------------- Global Playback State -----------------
// Instead of using a simple 16-bit counter, we use a fixed-point accumulator.
volatile const uint8_t *sample1Offset = 0;
volatile uint16_t sample1Length = 0;
volatile uint32_t sample1Acc = 0;      // 24.8 fixed-point accumulator for channel 1
volatile uint32_t sample1Inc = FP_ONE;   // Phase increment for channel 1

volatile const uint8_t *sample2Offset = 0;
volatile uint16_t sample2Length = 0;
volatile uint32_t sample2Acc = 0;      // 24.8 fixed-point accumulator for channel 2
volatile uint32_t sample2Inc = FP_ONE;   // Phase increment for channel 2

// NEW: Global pitch bend factor, stored in fixed-point.
volatile uint32_t globalPitchBendFactor = FP_ONE / 1;

//----------------- Functions to Start Playback on Each Channel -----------------
void playDigidrum1(byte index, byte velo) {
  cli();
  digitalWrite(ledPin, HIGH);
  ledTurnOffTime = millis() + 500;
  switch (index) {
      sample1Acc = 0;
  // UPDATED: Instead of resetting to FP_ONE, use the current global pitch bend factor.
  sample1Inc = globalPitchBendFactor;
  sei();
    case 48:
      sample1Offset = NOISEhihatvibra_C4;
      sample1Length = NOISEhihatvibra_C4_len;
      sample1VolumeScale = 3;
      sample1MaxVolume   = 15;
      break;
    case 49:
      sample1Offset = NOISEhihatopen_C4;
      sample1Length = NOISEhihatopen_C4_len;
      sample1VolumeScale = 3;
      sample1MaxVolume   = 15;
      break;
    case 50:
      sample1Offset = NOISEhihatclosed_C4;
      sample1Length = NOISEhihatclosed_C4_len;
      sample1VolumeScale = 3;
      sample1MaxVolume   = 15;
      break;
    case 51:
      sample1Offset = NOISEhihat909_C4;
      sample1Length = NOISEhihat909_C4_len;
      sample1VolumeScale = 3;
      sample1MaxVolume   = 15;
      break;
    case 52:
      sample1Offset = DPCMsynthdrum_C4;
      sample1Length = DPCMsynthdrum_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 53:
      sample1Offset = DPCMstick_C4;
      sample1Length = DPCMstick_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 54:
      sample1Offset = DPCMsnarehigh_C4;
      sample1Length = DPCMsnarehigh_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 55:
      sample1Offset = DPCMsnarecontra_C4;
      sample1Length = DPCMsnarecontra_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 56:
      sample1Offset = DPCMsnare909_C4;
      sample1Length = DPCMsnare909_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 57:
      sample1Offset = DPCMsnare9092_C4;
      sample1Length = DPCMsnare9092_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 58:
      sample1Offset = DPCMscream_C4;
      sample1Length = DPCMscream_C4_len;
      sample1VolumeScale = 3;
      sample1MaxVolume   = 15;
      break;
    case 59:
      sample1Offset = DPCMlaser_C4;
      sample1Length = DPCMlaser_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 60:
      sample1Offset = DPCMkickhard_C4;
      sample1Length = DPCMkickhard_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 61:
      sample1Offset = DPCMkick2_C4;
      sample1Length = DPCMkick2_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 62:
      sample1Offset = DPCMkick1_C4;
      sample1Length = DPCMkick1_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 63:
      sample1Offset = DPCMclap_C4;
      sample1Length = DPCMclap_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 64:
      sample1Offset = DPCMclap2_C4;
      sample1Length = DPCMclap2_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 65:
      sample1Offset = DPCMtick_C4;
      sample1Length = DPCMtick_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 66:
      sample1Offset = DPCMtimbA1_A_1;
      sample1Length = DPCMtimbA1_A_1_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 67:
      sample1Offset = DPCMtimbA1_A1;
      sample1Length = DPCMtimbA1_A1_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 68:
      sample1Offset = NOISEtiny1_C4;
      sample1Length = NOISEtiny1_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 69:
      sample1Offset = NOISEtiny2_C4;
      sample1Length = NOISEtiny2_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 70:
      sample1Offset = NOISEtiny3_C4;
      sample1Length = NOISEtiny3_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 71:
      sample1Offset = DPCMdog_C4;
      sample1Length = DPCMdog_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    case 72:
      sample1Offset = DPCMfiltersnap_C4;
      sample1Length = DPCMfiltersnap_C4_len;
      sample1VolumeScale = 1;
      sample1MaxVolume   = 15;
      break;
    default:
      sample1Offset = 0;
      sample1Length = 0;
      break;
  }
  sample1Acc = 0;
  // UPDATED: Instead of resetting to FP_ONE, use the current global pitch bend factor.
  sample1Inc = globalPitchBendFactor;
  sei();
}


//----------------- Timer2 ISR: Sample Playback with Reverb and Low Pass Filtering -----------------
ISR(TIMER2_COMPA_vect) {
  uint16_t s1 = 0;
  // Channel 1: Use the accumulator for fractional stepping.
  if ((sample1Acc >> FP_SHIFT) < sample1Length) {
    s1 = pgm_read_byte_near(sample1Offset + (sample1Acc >> FP_SHIFT));
    s1 = applyVolumeScaling(s1, sample1VolumeScale, sample1MaxVolume);
    sample1Acc += sample1Inc;
  }
  
  // Dry sample from channel 1:
  uint8_t dry = (uint8_t)s1;
  
  // --- Reverb Processing ---
  // Calculate the read index for the delayed sample:
  uint16_t reverbReadIndex = (reverbWriteIndex + REVERB_BUFFER_SIZE - REVERB_DELAY_SAMPLES) % REVERB_BUFFER_SIZE;
  uint8_t delayedSample = reverbBuffer[reverbReadIndex];
  
  // Mix dry and wet according to the reverb mix percentage.
  // When reverbMix is 0, only the dry signal is heard.
  uint16_t outputSample = dry;
  if (reverbMix > 0) {
    outputSample = (dry * (100 - reverbMix) + delayedSample * reverbMix) / 100;
  }
  if (outputSample > 255) outputSample = 255;
  
  // --- Low-Pass Filter Processing (NEW) ---
  // A one-pole low-pass filter: y[n] = y[n-1] + (alpha/256)*(x[n]-y[n-1])
  // We use a static variable to keep the previous filter state.
  static uint8_t lpfOutput = 0;
  lpfOutput = lpfOutput + (((uint16_t)filterAlpha * ((uint16_t)outputSample - lpfOutput)) >> 8);
  
  // Output the filtered sample:
  send_data(0x0A, lpfOutput);
  
  // --- Update the Reverb Buffer ---
  uint16_t newReverbSample = dry + (delayedSample * reverbFeedback) / 100;
  if (newReverbSample > 255) newReverbSample = 255;
  reverbBuffer[reverbWriteIndex] = (uint8_t)newReverbSample;
  
  // Increment and wrap the reverb buffer index:
  reverbWriteIndex = (reverbWriteIndex + 1) % REVERB_BUFFER_SIZE;
}


//----------------- Standard Functions -----------------
bool setupOCR1A = false;

void setup() {
  // Initialize output pins
  pinMode(ad0, OUTPUT);
  pinMode(ad1, OUTPUT);
  pinMode(ad2, OUTPUT);
  pinMode(ad3, OUTPUT);
  pinMode(ad4, OUTPUT);
  pinMode(ad5, OUTPUT);
  pinMode(ad6, OUTPUT);
  pinMode(ad7, OUTPUT);
  pinMode(pinBC1, OUTPUT);
  pinMode(pinBDIR, OUTPUT);
  pinMode(pinYMReset, OUTPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(buttonPin, INPUT);
  
  resetYM();
  Serial.begin(31250);
  
  // Initialize the reverb buffer to zero.
  for (uint16_t i = 0; i < REVERB_BUFFER_SIZE; i++) {
    reverbBuffer[i] = 0;
  }
  
  cli();
  // Timer2 setup for sample playback.
  // Using a fixed rate for the ISR; the sample playback rate is controlled by our phase increment.
  TCCR2A = 0;
  TCCR2B = 0; 
  TCCR2A |= (1 << WGM21); 
  OCR2A = 249;  // Adjust as needed for your desired base sample rate.
  TIMSK2 |= (1 << OCIE2A);
  TCCR2B |= (1 << CS21); 
  sei();

  // Trigger sample playback on channel 1 as an example.
  playDigidrum1(58, 127);
  // Optionally, trigger channel 2 as well:
  // playDigidrum2(58, 127);
}

void loop() {
  byte command = getSerialByte();
  byte commandMSB = command & 0xF0;
  byte midiChannel = command & 0x0F;

  switch (commandMSB) {
    case 0x80: { // Note Off
      byte note = getSerialByte();
      if (setBankB)
        stopNoteB(note, midiChannel);
      else
        stopNote(note, midiChannel);
      break;
    }
    
    case 0x90: { // Note On
      byte note = getSerialByte();
      byte velo = getSerialByte();
      if (midiChannel == 0x00 && velo != 0) {
        // For this example, we trigger channel 1.
        playDigidrum1(note, velo);
      }
      break;
    }
    
    // Handle Control Change messages (0xB0)
    case 0xB0: {
      handleControlChange(midiChannel);
      break;
    }
    
    // For Key Pressure, Program Change, Channel Pressure:
    case 0xA0:
    case 0xC0:
    case 0xD0:
      getSerialByte();
      getSerialByte();
      break;

    case 0xE0: { // Pitch Bend
      // Pitch bend messages have 2 data bytes (LSB then MSB)
      byte lsb = getSerialByte();
      byte msb = getSerialByte();
      uint16_t pitchValue = ((uint16_t)msb << 7) | lsb;
      handlePitchBend(pitchValue);
      break;
    }
  }
  if (millis() >= ledTurnOffTime) {
    digitalWrite(ledPin, LOW);
  }
}

void handlePitchBend(uint16_t pitchValue) {
  // MIDI pitch bend is 14 bits: 0 - 16383, center at 8192.
  float bend = ((int)pitchValue - 8192) / 8192.0;
  
  // Remove the -12 semitones offset for a centered pitch.
  float semitoneShift = bend * PITCH_BEND_RANGE;
  
  // Calculate the playback factor using equal temperament.
  float factor = pow(2.0, semitoneShift / 12.0);
  
  // Update the global pitch bend factor:
  globalPitchBendFactor = (uint32_t)(FP_ONE * factor);
  
  // Apply the new factor to both channels immediately.
  sample1Inc = globalPitchBendFactor;
  sample2Inc = globalPitchBendFactor;
}


void handleControlChange(byte midiChannel) {
  byte controlNumber = getSerialByte();
  byte controlValue = getSerialByte();
  
  // NEW: Use mod wheel (CC1) for low-pass filter control:
  if (controlNumber == 1) {
    // Map 0-127 to filterAlpha values from 16 (more filtering) to 255 (nearly bypassed).
    filterAlpha = 30 + ((controlValue * (255 - 30)) / 127);
  }
  // Use CC2 for reverb mix:
  else if (controlNumber == 2) {
    reverbMix = (controlValue * 100) / 127;  // Map 0-127 to 0-100%
  }
  // (Other CC messages can be handled here as needed.)
}

void resetYM() {
  digitalWrite(pinYMReset, LOW);
  digitalWrite(pinYMReset, HIGH);
  delay(1);
  send_data(0x07, 0b00111000);
  for (byte i = 0; i <= defaultLevel; i++) {
    send_data(0x08, i);
    send_data(0x09, i);
    send_data(0x0A, i);
    delay(1);
  }
}

void send_data(uint8_t address, uint8_t data) {
  outputToYM(address); // Send address first
  __BCPORT__ |= (1 << __BDIR__) | (1 << __BC1__);
  delayMicroseconds(10);
  __BCPORT__ &= ~((1 << __BDIR__) | (1 << __BC1__));
  outputToYM(data); // Send data
  __BCPORT__ |= (1 << __BDIR__);
  delayMicroseconds(10);
  __BCPORT__ &= ~(1 << __BDIR__);
  __LEDPORT__ &= ~(1 << __LED__);
}

void outputToYM(uint8_t value) {
  PORTB = (PORTB & 0xFC) | (value & 0x03); // Lower 2 bits to PB0-PB1
  PORTD = (value & 0xFC);                  // Upper 6 bits to PD2-PD7
}

void setPinState(volatile uint8_t &port, uint8_t pin, bool state) {
  if (state)
    setPinHigh(port, pin);
  else
    setPinLow(port, pin);
}

byte getSerialByte() {
  while (Serial.available() < 1)
    __asm__("nop\n\t");
  return Serial.read();
}

void playNote(byte note, byte velo, byte chan, int pitchBendValue){}
void stopNote(byte note, byte chan){}
void playNoteB(byte note, byte velo, byte chan, int pitchBendValue){}
void stopNoteB(byte note, byte chan){}
